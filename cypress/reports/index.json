{
  "stats": {
    "suites": 23,
    "tests": 134,
    "passes": 132,
    "pending": 0,
    "failures": 2,
    "testsRegistered": 134,
    "passPercent": 98.50746268656717,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-06-28T22:06:41.032Z",
    "end": "2025-06-28T22:10:13.732Z",
    "duration": 212700
  },
  "results": [
    {
      "uuid": "2b2c03ff-61d8-4f34-84cc-7b170b46dfe6",
      "title": "",
      "fullFile": "cypress\\e2e\\book-store\\TC1 - error sample login.cy.js",
      "file": "cypress\\e2e\\book-store\\TC1 - error sample login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "67fb0cfe-036a-41b5-bb48-021e77726061",
          "title": "error sample book store login page",
          "fullFile": "cypress\\e2e\\book-store\\TC1 - error sample login.cy.js",
          "file": "cypress\\e2e\\book-store\\TC1 - error sample login.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "tc01 - should display login form elements",
              "fullTitle": "error sample book store login page tc01 - should display login form elements",
              "timedOut": null,
              "duration": 10541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName-label').should('be.visible');\ncy.get('#password-label').should('be.visible');\ncy.get('#login').should('exist');\ncy.get('#newUser').should('exist');\ncy.get('.text-center').should('contain', 'Login');",
              "err": {},
              "uuid": "6311c19a-98de-4552-821f-0e0f868c52a2",
              "parentUUID": "67fb0cfe-036a-41b5-bb48-021e77726061",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tc02 - valid login",
              "fullTitle": "error sample book store login page tc02 - valid login",
              "timedOut": null,
              "duration": 4891,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"data:image/png;base64, \"\n    }\n]",
              "code": "cy.get('#userName').type('alicia.tan92');\ncy.get('#password').type('P@ssw0rd8!');\ncy.get('#login').click();\n// assert profile page\ncy.url().should('include', '/profile');\ncy.get('.main-header').should('contain', 'Profile');\n// go back to login for next tests\ncy.visit('/login');",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#userName`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#userName`, but never found it.\n    at Context.eval (webpack://cypress_project/./cypress/e2e/book-store/TC1 - error sample login.cy.js:22:11)",
                "diff": null
              },
              "uuid": "1fd7fe89-8e32-4157-8c8a-7faa55886635",
              "parentUUID": "67fb0cfe-036a-41b5-bb48-021e77726061",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6311c19a-98de-4552-821f-0e0f868c52a2"
          ],
          "failures": [
            "1fd7fe89-8e32-4157-8c8a-7faa55886635"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15432,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "126bbf2f-e1e0-4be0-8426-9c60a4cfdaeb",
      "title": "",
      "fullFile": "cypress\\e2e\\book-store\\TC1 - login.cy.js",
      "file": "cypress\\e2e\\book-store\\TC1 - login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a89aba0a-ddaf-49e4-a416-add1e0e3f215",
          "title": "Book Store Login Page",
          "fullFile": "cypress\\e2e\\book-store\\TC1 - login.cy.js",
          "file": "cypress\\e2e\\book-store\\TC1 - login.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC01 - Login page: should display login form elements correctly",
              "fullTitle": "Book Store Login Page TC01 - Login page: should display login form elements correctly",
              "timedOut": null,
              "duration": 9245,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName-label').should('be.visible');\ncy.get('#password-label').should('be.visible');\ncy.get('#login').should('exist');\ncy.get('#newUser').should('exist');\ncy.get('.text-center').should('contain', 'Login');",
              "err": {},
              "uuid": "46cdad6f-83b5-4b65-9de4-730463f58f8b",
              "parentUUID": "a89aba0a-ddaf-49e4-a416-add1e0e3f215",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC02 - Login with valid data: should able to login",
              "fullTitle": "Book Store Login Page TC02 - Login with valid data: should able to login",
              "timedOut": null,
              "duration": 16205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName.form-control').type('alicia.tan92');\ncy.get('#password.form-control').type('P@ssw0rd8!');\ncy.get('#login').click();\ncy.url().should('include', '/profile');",
              "err": {},
              "uuid": "a43bd9c2-2e81-42f9-b459-63c89ae36b6d",
              "parentUUID": "a89aba0a-ddaf-49e4-a416-add1e0e3f215",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC03 - Login with invalid data: should show error",
              "fullTitle": "Book Store Login Page TC03 - Login with invalid data: should show error",
              "timedOut": null,
              "duration": 8278,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName').type('wrong.user');\ncy.get('#password').type('wrongPassword123');\ncy.get('#login').click();\ncy.get('#name').should('be.visible').and('contain', 'Invalid username or password!').and('have.css', 'color', 'rgb(255, 0, 0)');",
              "err": {},
              "uuid": "7c9bf4ce-1809-4f17-8d29-d2ad4d4eac4b",
              "parentUUID": "a89aba0a-ddaf-49e4-a416-add1e0e3f215",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC04 - Login with empty form: should show error",
              "fullTitle": "Book Store Login Page TC04 - Login with empty form: should show error",
              "timedOut": null,
              "duration": 25924,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName').click();\ncy.get('#password').click();\ncy.get('#login').click();\n// check if both inputs have the 'is-invalid' class (red highlight)\ncy.get('#userName').should('have.class', 'is-invalid');\ncy.get('#password').should('have.class', 'is-invalid');",
              "err": {},
              "uuid": "73137378-0dfa-4247-958a-1396ae481288",
              "parentUUID": "a89aba0a-ddaf-49e4-a416-add1e0e3f215",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46cdad6f-83b5-4b65-9de4-730463f58f8b",
            "a43bd9c2-2e81-42f9-b459-63c89ae36b6d",
            "7c9bf4ce-1809-4f17-8d29-d2ad4d4eac4b",
            "73137378-0dfa-4247-958a-1396ae481288"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 59652,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c10b75f4-a7ab-4bea-a1d3-b3ac8173a038",
      "title": "",
      "fullFile": "cypress\\e2e\\book-store\\TC1 - optimize.cy.js",
      "file": "cypress\\e2e\\book-store\\TC1 - optimize.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "06029eba-c0fe-4751-b1ca-b4d9d9b786ba",
          "title": "book store login page",
          "fullFile": "cypress\\e2e\\book-store\\TC1 - optimize.cy.js",
          "file": "cypress\\e2e\\book-store\\TC1 - optimize.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "tc01 - login page: should display login form elements correctly",
              "fullTitle": "book store login page tc01 - login page: should display login form elements correctly",
              "timedOut": null,
              "duration": 5762,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName-label').should('be.visible');\ncy.get('#password-label').should('be.visible');\ncy.get('#login').should('exist');\ncy.get('#newUser').should('exist');\ncy.get('.text-center').should('contain', 'Login');",
              "err": {},
              "uuid": "580cf593-d428-48c1-8745-b86c3cadd9ab",
              "parentUUID": "06029eba-c0fe-4751-b1ca-b4d9d9b786ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tc02 - login with valid data: should able to login",
              "fullTitle": "book store login page tc02 - login with valid data: should able to login",
              "timedOut": null,
              "duration": 14382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsername().type('alicia.tan92');\ncy.getPassword().type('P@ssw0rd8!');\ncy.get('#login').click();\ncy.url().should('include', '/profile');",
              "err": {},
              "uuid": "c58adc72-ace1-4d00-bd43-fb69cd00df73",
              "parentUUID": "06029eba-c0fe-4751-b1ca-b4d9d9b786ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tc03 - login with invalid data: should show error",
              "fullTitle": "book store login page tc03 - login with invalid data: should show error",
              "timedOut": null,
              "duration": 7630,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsername().type('wrong.user');\ncy.getPassword().type('wrongPassword123');\ncy.get('#login').click();\ncy.get('#name').should('be.visible').and('contain', 'Invalid username or password!').and('have.css', 'color', 'rgb(255, 0, 0)');",
              "err": {},
              "uuid": "ef0e23e9-c321-4053-8e3c-42586f638369",
              "parentUUID": "06029eba-c0fe-4751-b1ca-b4d9d9b786ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tc04 - login with empty form: should show error",
              "fullTitle": "book store login page tc04 - login with empty form: should show error",
              "timedOut": null,
              "duration": 5329,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsername().click();\ncy.getPassword().click();\ncy.get('#login').click();\ncy.getUsername().should('have.class', 'is-invalid');\ncy.getPassword().should('have.class', 'is-invalid');",
              "err": {},
              "uuid": "3f0ae8e9-70e0-4c61-a1c8-2cab79469edc",
              "parentUUID": "06029eba-c0fe-4751-b1ca-b4d9d9b786ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "580cf593-d428-48c1-8745-b86c3cadd9ab",
            "c58adc72-ace1-4d00-bd43-fb69cd00df73",
            "ef0e23e9-c321-4053-8e3c-42586f638369",
            "3f0ae8e9-70e0-4c61-a1c8-2cab79469edc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33103,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "97bb8949-b190-45fc-8e51-16f2a0ad7b5a",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8320af21-3f83-459a-b080-d123fe1123c8",
          "title": "Actions",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 3957,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com')\n// .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}')\n// .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}')\n// Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled')\n// Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "8573b96e-1210-4ab3-bfe9-2db11072ee59",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 149,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "36838671-6d9c-4081-a4ac-f79dfd8e765f",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 433,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "4451c1c2-e574-4a51-979e-a6ffa5082ca8",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 536,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "6b127f11-d75a-48bf-9790-f4851d8c8c25",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 433,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "2536c988-b90c-4ac8-8cc1-551aabf2a738",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 2008,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click();\n// You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight');\n// .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165);\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n});\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "97fc3fbb-0f5b-43c4-b736-bd406b266a33",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 235,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "2f1898a5-b153-4f2a-97f6-7f215c97fa0b",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "9a2c65f4-7c06-420d-849c-612686ccbcc8",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 836,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked');\n// .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked');\n// .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked');\n// Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "272c41a4-f78f-41a9-b678-a46ad16de071",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 855,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked');\n// .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked');\n// .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked');\n// Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "ea846e83-5866-4528-8a19-5c188ee016b8",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 937,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--');\n// Select option(s) with matching text content\ncy.get('.action-select').select('apples');\n// confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas'])\n// when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas')\n// can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "8ea25bea-416e-4933-ac2c-f6a8fbee22c4",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 165,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible');\n// scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible');\n// Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible');\n// Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "f922ff23-80ac-4cfb-be77-ea477b7bab3a",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 156,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "81dfa3d8-f6e9-43c8-b58c-33aed14c499a",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2150,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right');\n// or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250);\n// or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%');\n// control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n});\n// control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "a7b76848-e1e5-4519-bea6-2c3a08454252",
              "parentUUID": "8320af21-3f83-459a-b080-d123fe1123c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8573b96e-1210-4ab3-bfe9-2db11072ee59",
            "36838671-6d9c-4081-a4ac-f79dfd8e765f",
            "4451c1c2-e574-4a51-979e-a6ffa5082ca8",
            "6b127f11-d75a-48bf-9790-f4851d8c8c25",
            "2536c988-b90c-4ac8-8cc1-551aabf2a738",
            "97fc3fbb-0f5b-43c4-b736-bd406b266a33",
            "2f1898a5-b153-4f2a-97f6-7f215c97fa0b",
            "9a2c65f4-7c06-420d-849c-612686ccbcc8",
            "272c41a4-f78f-41a9-b678-a46ad16de071",
            "ea846e83-5866-4528-8a19-5c188ee016b8",
            "8ea25bea-416e-4933-ac2c-f6a8fbee22c4",
            "f922ff23-80ac-4cfb-be77-ea477b7bab3a",
            "81dfa3d8-f6e9-43c8-b58c-33aed14c499a",
            "a7b76848-e1e5-4519-bea6-2c3a08454252"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13058,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3245d0d0-1b8d-4649-a90f-d48d277dca66",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c9c492f6-5a03-4857-9f64-2000d20515a6",
          "title": "Aliasing",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 515,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn');\n// when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "b46df27a-ff5e-4bcf-ab97-918043d8d3ce",
              "parentUUID": "c9c492f6-5a03-4857-9f64-2000d20515a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 1759,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "5aa12031-9714-451e-a7b5-078d8359fb61",
              "parentUUID": "c9c492f6-5a03-4857-9f64-2000d20515a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b46df27a-ff5e-4bcf-ab97-918043d8d3ce",
            "5aa12031-9714-451e-a7b5-078d8359fb61"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2274,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d9ed97f8-3c35-41f4-beca-9725dda899c2",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d465bcab-5654-4541-93ac-96550896477b",
          "title": "Assertions",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cba99a71-830f-482b-9217-8a3588526b06",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 474,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first()\n// checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content')\n// chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td')\n// to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i);\n// a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last')\n// finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible');\n// for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "e41e10c3-9c4e-43cd-9340-47788b398238",
                  "parentUUID": "cba99a71-830f-482b-9217-8a3588526b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 140,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "07895f7d-b07b-45b4-9ad3-22bbfff6510a",
                  "parentUUID": "cba99a71-830f-482b-9217-8a3588526b06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e41e10c3-9c4e-43cd-9340-47788b398238",
                "07895f7d-b07b-45b4-9ad3-22bbfff6510a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 614,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "61f439cf-7f49-4a51-8022-547694a9b401",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 124,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n});\n// matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "7b3e7413-1483-49c0-9f7f-9d35a3f71e42",
                  "parentUUID": "61f439cf-7f49-4a51-8022-547694a9b401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 134,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  const texts = $p.map((i, el) => Cypress.$(el).text());\n  // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get();\n  // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3);\n  // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "b04390e0-af8c-440d-bbce-013fe7a994e6",
                  "parentUUID": "61f439cf-7f49-4a51-8022-547694a9b401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 163,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div')\n// .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n})\n// .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "3cb4b89f-e262-4354-95e9-0d34d0264d4d",
                  "parentUUID": "61f439cf-7f49-4a51-8022-547694a9b401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 155,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "0bf45485-c8fd-4ad9-adfa-1c7dab1b9d53",
                  "parentUUID": "61f439cf-7f49-4a51-8022-547694a9b401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 145,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n */\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n */\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "5b32b03b-e4bb-4341-9ee4-746d7fe84312",
                  "parentUUID": "61f439cf-7f49-4a51-8022-547694a9b401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 126,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "94573266-46e4-483e-a175-84165f3e2de7",
                  "parentUUID": "61f439cf-7f49-4a51-8022-547694a9b401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1651,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "3a34bde6-58cb-400b-bf53-a16da6cae48e",
                  "parentUUID": "61f439cf-7f49-4a51-8022-547694a9b401",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b3e7413-1483-49c0-9f7f-9d35a3f71e42",
                "b04390e0-af8c-440d-bbce-013fe7a994e6",
                "3cb4b89f-e262-4354-95e9-0d34d0264d4d",
                "0bf45485-c8fd-4ad9-adfa-1c7dab1b9d53",
                "5b32b03b-e4bb-4341-9ee4-746d7fe84312",
                "94573266-46e4-483e-a175-84165f3e2de7",
                "3a34bde6-58cb-400b-bf53-a16da6cae48e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2498,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "83a40556-7713-4b8d-923e-04cc2af96d2a",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e7e36698-6e05-4513-b8ab-5c00a67df82d",
          "title": "Connectors",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 412,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "b16bf9da-01d5-4a00-8e36-bf2f40c3e377",
              "parentUUID": "e7e36698-6e05-4513-b8ab-5c00a67df82d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 137,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li')\n// calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "93321b5e-7e9a-4f15-b1ee-64d126e40021",
              "parentUUID": "e7e36698-6e05-4513-b8ab-5c00a67df82d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 142,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\ncy.get('.connectors-div').should('be.hidden');\n// https://on.cypress.io/invoke\n// call the jquery method 'show' on the 'div.container'\ncy.get('.connectors-div').invoke('show');\ncy.get('.connectors-div').should('be.visible');",
              "err": {},
              "uuid": "19cfd2b5-b818-4e62-92ab-4bd0888c5a83",
              "parentUUID": "e7e36698-6e05-4513-b8ab-5c00a67df82d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "791a1e33-9145-4d61-b67d-9d49560bf4dc",
              "parentUUID": "e7e36698-6e05-4513-b8ab-5c00a67df82d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "10afdd19-68eb-4622-bceb-9580dcac4e7c",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 122,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "060080a4-54c9-405d-a22d-118aee40f8aa",
                  "parentUUID": "10afdd19-68eb-4622-bceb-9580dcac4e7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 127,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "1ba84e90-1cd7-4fff-9d3c-0191b2772b96",
                  "parentUUID": "10afdd19-68eb-4622-bceb-9580dcac4e7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 125,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "eeceb0e1-1fb8-4db8-ab02-6f2ccfd31179",
                  "parentUUID": "10afdd19-68eb-4622-bceb-9580dcac4e7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 141,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "3fd77c7a-9636-4ec6-a3b0-4965de8b5d5e",
                  "parentUUID": "10afdd19-68eb-4622-bceb-9580dcac4e7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "060080a4-54c9-405d-a22d-118aee40f8aa",
                "1ba84e90-1cd7-4fff-9d3c-0191b2772b96",
                "eeceb0e1-1fb8-4db8-ab02-6f2ccfd31179",
                "3fd77c7a-9636-4ec6-a3b0-4965de8b5d5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 515,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "b16bf9da-01d5-4a00-8e36-bf2f40c3e377",
            "93321b5e-7e9a-4f15-b1ee-64d126e40021",
            "19cfd2b5-b818-4e62-92ab-4bd0888c5a83",
            "791a1e33-9145-4d61-b67d-9d49560bf4dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 827,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bb917616-33c5-4913-a835-3ccd087e9e17",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "54f47108-4237-4fed-9230-0a2b15ef9894",
          "title": "Cookies",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 514,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click();\n// cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "38c25d5f-05be-47ca-a323-958dccef2f52",
              "parentUUID": "54f47108-4237-4fed-9230-0a2b15ef9894",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies for the current domain",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies for the current domain",
              "timedOut": null,
              "duration": 225,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click();\n// cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "43b0a02a-4690-4282-8446-76ed658823ac",
              "parentUUID": "54f47108-4237-4fed-9230-0a2b15ef9894",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllCookies() - get all browser cookies",
              "fullTitle": "Cookies cy.getAllCookies() - get all browser cookies",
              "timedOut": null,
              "duration": 147,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\n// cy.getAllCookies() yields an array of cookies\ncy.getAllCookies().should('have.length', 2).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'key');\n  expect(cookies[0]).to.have.property('value', 'value');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n  expect(cookies[1]).to.have.property('name', 'key');\n  expect(cookies[1]).to.have.property('value', 'value');\n  expect(cookies[1]).to.have.property('httpOnly', false);\n  expect(cookies[1]).to.have.property('secure', false);\n  expect(cookies[1]).to.have.property('domain', '.example.com');\n  expect(cookies[1]).to.have.property('path');\n});",
              "err": {},
              "uuid": "ca0b03a7-cafd-4ee8-8912-b09ed1187cb2",
              "parentUUID": "54f47108-4237-4fed-9230-0a2b15ef9894",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar');\n// cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "33ab178b-39ab-429c-aa26-d0aa98607725",
              "parentUUID": "54f47108-4237-4fed-9230-0a2b15ef9894",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC');\n// cy.clearCookies() yields null\ncy.clearCookie('token').should('be.null');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "0c5c1ceb-0d20-41fe-87ee-d55cfcd2b775",
              "parentUUID": "54f47108-4237-4fed-9230-0a2b15ef9894",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies for the current domain",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies for the current domain",
              "timedOut": null,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1);\n// cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "3556491b-be10-4303-9e7a-64459d23e7c7",
              "parentUUID": "54f47108-4237-4fed-9230-0a2b15ef9894",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllCookies() - clear all browser cookies",
              "fullTitle": "Cookies cy.clearAllCookies() - clear all browser cookies",
              "timedOut": null,
              "duration": 155,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\ncy.getAllCookies().should('have.length', 2);\n// cy.clearAllCookies() yields null\ncy.clearAllCookies();\ncy.getAllCookies().should('be.empty');",
              "err": {},
              "uuid": "5c65c1e1-3d73-4f98-be34-9895dcfc3e85",
              "parentUUID": "54f47108-4237-4fed-9230-0a2b15ef9894",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38c25d5f-05be-47ca-a323-958dccef2f52",
            "43b0a02a-4690-4282-8446-76ed658823ac",
            "ca0b03a7-cafd-4ee8-8912-b09ed1187cb2",
            "33ab178b-39ab-429c-aa26-d0aa98607725",
            "0c5c1ceb-0d20-41fe-87ee-d55cfcd2b775",
            "3556491b-be10-4303-9e7a-64459d23e7c7",
            "5c65c1e1-3d73-4f98-be34-9895dcfc3e85"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1636,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "01c7f078-a5cb-41bf-b2ec-bb1ccbc06da1",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bc8675ae-d5ab-4866-9d87-f1f5eb30223e",
          "title": "Cypress APIs",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dadf8ffe-c976-4601-88d8-daaa71020362",
              "title": "Cypress.Commands",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".add() - create a custom command",
                  "fullTitle": "Cypress APIs Cypress.Commands .add() - create a custom command",
                  "timedOut": null,
                  "duration": 588,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nCypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log';\n  // log the subject to the console\n  console[method]('The subject is', subject);\n  // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n});\n// @ts-ignore\ncy.get('button').console('info').then($button => {\n  // subject is still $button\n});",
                  "err": {},
                  "uuid": "9a50d6c8-9eea-4430-a0cf-005e78c31714",
                  "parentUUID": "dadf8ffe-c976-4601-88d8-daaa71020362",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a50d6c8-9eea-4430-a0cf-005e78c31714"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 588,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c76eac6-2141-4be5-8e01-5f73c900eeb7",
              "title": "Cypress.Cookies",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".debug() - enable or disable debugging",
                  "fullTitle": "Cypress APIs Cypress.Cookies .debug() - enable or disable debugging",
                  "timedOut": null,
                  "duration": 139,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Cookies.debug(true);\n// Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
                  "err": {},
                  "uuid": "9b45a441-bf62-48c4-9f2e-894c33083712",
                  "parentUUID": "5c76eac6-2141-4be5-8e01-5f73c900eeb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b45a441-bf62-48c4-9f2e-894c33083712"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 139,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7be7f9bc-dfc4-453d-b6c5-edc6307b2cbb",
              "title": "Cypress.arch",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get CPU architecture name of underlying OS",
                  "fullTitle": "Cypress APIs Cypress.arch Get CPU architecture name of underlying OS",
                  "timedOut": null,
                  "duration": 131,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
                  "err": {},
                  "uuid": "762b1e65-8e2c-43bd-a269-de727fe80bc7",
                  "parentUUID": "7be7f9bc-dfc4-453d-b6c5-edc6307b2cbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "762b1e65-8e2c-43bd-a269-de727fe80bc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4509d68-4bb7-4c78-98bd-88bbbba45d3e",
              "title": "Cypress.config()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get and set configuration options",
                  "fullTitle": "Cypress APIs Cypress.config() Get and set configuration options",
                  "timedOut": null,
                  "duration": 274,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"data:image/png;base64, \"\n    }\n]",
                  "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000);\n// this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
                  "err": {
                    "message": "AssertionError: expected { Object (reporter, reporterOptions, ...) } to have property 'baseUrl' of null, but got 'https://demoqa.com'",
                    "estack": "AssertionError: expected { Object (reporter, reporterOptions, ...) } to have property 'baseUrl' of null, but got 'https://demoqa.com'\n    at Context.eval (webpack://cypress_project/./cypress/e2e/2-advanced-examples/cypress_api.cy.js:79:31)",
                    "diff": null
                  },
                  "uuid": "75bfabd6-691d-4c8a-ab17-1aee9c597be3",
                  "parentUUID": "c4509d68-4bb7-4c78-98bd-88bbbba45d3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "75bfabd6-691d-4c8a-ab17-1aee9c597be3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 274,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a92d543-d4d9-43c7-82cf-81768394052b",
              "title": "Cypress.dom",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".isHidden() - determine if a DOM element is hidden",
                  "fullTitle": "Cypress APIs Cypress.dom .isHidden() - determine if a DOM element is hidden",
                  "timedOut": null,
                  "duration": 143,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0);\n// our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
                  "err": {},
                  "uuid": "2a7de2b0-81b6-49e4-8cd7-a2635ea31153",
                  "parentUUID": "0a92d543-d4d9-43c7-82cf-81768394052b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a7de2b0-81b6-49e4-8cd7-a2635ea31153"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 143,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de2f41a1-b0e8-4e6c-938c-b2a85e780eaf",
              "title": "Cypress.env()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get environment variables",
                  "fullTitle": "Cypress APIs Cypress.env() Get environment variables",
                  "timedOut": null,
                  "duration": 131,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n});\n// get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local');\n// set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/');\n// get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
                  "err": {},
                  "uuid": "8f51a3b8-8d81-421d-a00a-5548c794dc26",
                  "parentUUID": "de2f41a1-b0e8-4e6c-938c-b2a85e780eaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f51a3b8-8d81-421d-a00a-5548c794dc26"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c64e413e-2eaf-4718-addf-ec3315611dd2",
              "title": "Cypress.log",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Control what is printed to the Command Log",
                  "fullTitle": "Cypress APIs Cypress.log Control what is printed to the Command Log",
                  "timedOut": null,
                  "duration": 113,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/cypress-log",
                  "err": {},
                  "uuid": "45f9fac9-1d28-4ce2-ab1c-720e59fbe407",
                  "parentUUID": "c64e413e-2eaf-4718-addf-ec3315611dd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45f9fac9-1d28-4ce2-ab1c-720e59fbe407"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 113,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "132d1173-6593-4b89-bf80-d02e97530c45",
              "title": "Cypress.platform",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get underlying OS name",
                  "fullTitle": "Cypress APIs Cypress.platform Get underlying OS name",
                  "timedOut": null,
                  "duration": 124,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
                  "err": {},
                  "uuid": "08fdc4c8-2ffa-49ae-97db-37e1f2e3b108",
                  "parentUUID": "132d1173-6593-4b89-bf80-d02e97530c45",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08fdc4c8-2ffa-49ae-97db-37e1f2e3b108"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 124,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af46c322-2c00-426c-90ee-2e0bb0e1a78b",
              "title": "Cypress.version",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current version of Cypress being run",
                  "fullTitle": "Cypress APIs Cypress.version Get current version of Cypress being run",
                  "timedOut": null,
                  "duration": 118,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
                  "err": {},
                  "uuid": "b2473e6d-9e55-46f3-8efe-da27a45993d8",
                  "parentUUID": "af46c322-2c00-426c-90ee-2e0bb0e1a78b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2473e6d-9e55-46f3-8efe-da27a45993d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 118,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f5ba952-10cc-4362-bd5b-70ccb3b3dedb",
              "title": "Cypress.spec",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current spec information",
                  "fullTitle": "Cypress APIs Cypress.spec Get current spec information",
                  "timedOut": null,
                  "duration": 133,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
                  "err": {},
                  "uuid": "4759c353-b923-40ce-b11e-3615bde75bd0",
                  "parentUUID": "6f5ba952-10cc-4362-bd5b-70ccb3b3dedb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4759c353-b923-40ce-b11e-3615bde75bd0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 133,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cf988225-57e1-45b2-8a9c-3480b1255775",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d5d41acd-5adf-4f57-9e4b-9a8cdaeb7792",
          "title": "Files",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 927,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "88825f85-8b86-4bc0-b261-c1c0320f820c",
              "parentUUID": "d5d41acd-5adf-4f57-9e4b-9a8cdaeb7792",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample);\n// or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "7bdf22d7-40e5-4370-8ef2-000e3e0c40d5",
              "parentUUID": "d5d41acd-5adf-4f57-9e4b-9a8cdaeb7792",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile(Cypress.config('configFile')).then(config => {\n  expect(config).to.be.an('string');\n});",
              "err": {},
              "uuid": "8c32149c-c4a3-45fa-be01-64502d28b0f8",
              "parentUUID": "d5d41acd-5adf-4f57-9e4b-9a8cdaeb7792",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 504,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n});\n// JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "b6947625-c53d-4e0c-9ae3-071da54d8ccd",
              "parentUUID": "d5d41acd-5adf-4f57-9e4b-9a8cdaeb7792",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88825f85-8b86-4bc0-b261-c1c0320f820c",
            "7bdf22d7-40e5-4370-8ef2-000e3e0c40d5",
            "8c32149c-c4a3-45fa-be01-64502d28b0f8",
            "b6947625-c53d-4e0c-9ae3-071da54d8ccd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1714,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8c35159a-e92f-4d50-81fb-2004b95d199b",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ad9397b3-e6fd-4bd0-a2d7-cb1b4c675f2a",
          "title": "Location",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 645,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "7d7e36a8-b115-4e1f-8c35-8e11e5c540eb",
              "parentUUID": "ad9397b3-e6fd-4bd0-a2d7-cb1b4c675f2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "64cc51a6-544f-4146-8c5f-6e677098246d",
              "parentUUID": "ad9397b3-e6fd-4bd0-a2d7-cb1b4c675f2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "bfbf6a72-2714-46ea-8eaf-b231cf51bfef",
              "parentUUID": "ad9397b3-e6fd-4bd0-a2d7-cb1b4c675f2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d7e36a8-b115-4e1f-8c35-8e11e5c540eb",
            "64cc51a6-544f-4146-8c5f-6e677098246d",
            "bfbf6a72-2714-46ea-8eaf-b231cf51bfef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 896,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2a663ee9-7519-456c-a28e-970955bc3e24",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "43a79503-be19-4559-924c-0a1edacaab11",
          "title": "Misc",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".end() - end the command chain",
              "fullTitle": "Misc .end() - end the command chain",
              "timedOut": null,
              "duration": 634,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/end\n// cy.end is useful when you want to end a chain of commands\n// and force Cypress to re-query from the root element\ncy.get('.misc-table').within(() => {\n  // ends the current chain and yields null\n  cy.contains('Cheryl').click().end();\n  // queries the entire table again\n  cy.contains('Charles').click();\n});",
              "err": {},
              "uuid": "c88b4106-6fe6-42d4-91a9-0c905a4ea618",
              "parentUUID": "43a79503-be19-4559-924c-0a1edacaab11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 175,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`);\n// on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nconst isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  cy.log('Skipping test on CircleCI');\n  return;\n}\n// cy.exec problem on Shippable CI\n// https://github.com/cypress-io/cypress/issues/6718\nconst isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\nif (isShippable) {\n  cy.log('Skipping test on ShippableCI');\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec(`print ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n} else {\n  cy.exec(`cat ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "32fb406a-91f4-4954-97c6-82a837e92f14",
              "parentUUID": "43a79503-be19-4559-924c-0a1edacaab11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 294,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "f937e105-c7cc-4f6d-a14b-4b1d1702e62a",
              "parentUUID": "43a79503-be19-4559-924c-0a1edacaab11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "51b6eda3-1acc-44a4-8293-324b9dcd3429",
              "parentUUID": "43a79503-be19-4559-924c-0a1edacaab11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2a0f1f14-134b-49f3-a2c9-770103eb0848",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 644,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Screenshot (my-image)\",\n        \"value\": \"data:image/png;base64, \"\n    }\n]",
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "20df60a9-b75e-47aa-96fc-cb3307f13d72",
                  "parentUUID": "2a0f1f14-134b-49f3-a2c9-770103eb0848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 122,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  onBeforeScreenshot() {},\n  onAfterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "3927686b-d8ed-4382-899a-4b0266f98fac",
                  "parentUUID": "2a0f1f14-134b-49f3-a2c9-770103eb0848",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20df60a9-b75e-47aa-96fc-cb3307f13d72",
                "3927686b-d8ed-4382-899a-4b0266f98fac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 766,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "c88b4106-6fe6-42d4-91a9-0c905a4ea618",
            "32fb406a-91f4-4954-97c6-82a837e92f14",
            "f937e105-c7cc-4f6d-a14b-4b1d1702e62a",
            "51b6eda3-1acc-44a4-8293-324b9dcd3429"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1235,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d49c44b8-4d9f-49bb-8c4b-100a18b3abbe",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cf20eae6-41d7-4345-9eb8-f5456782c612",
          "title": "Navigation",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.go() - go back or forward in the browser's history",
              "fullTitle": "Navigation cy.go() - go back or forward in the browser's history",
              "timedOut": null,
              "duration": 1438,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/go\ncy.location('pathname').should('include', 'navigation');\ncy.go('back');\ncy.location('pathname').should('not.include', 'navigation');\ncy.go('forward');\ncy.location('pathname').should('include', 'navigation');\n// clicking back\ncy.go(-1);\ncy.location('pathname').should('not.include', 'navigation');\n// clicking forward\ncy.go(1);\ncy.location('pathname').should('include', 'navigation');",
              "err": {},
              "uuid": "96dd4caf-ec81-4690-9df2-946e4e35a7f9",
              "parentUUID": "cf20eae6-41d7-4345-9eb8-f5456782c612",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.reload() - reload the page",
              "fullTitle": "Navigation cy.reload() - reload the page",
              "timedOut": null,
              "duration": 487,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/reload\ncy.reload();\n// reload the page without using the cache\ncy.reload(true);",
              "err": {},
              "uuid": "72608c4d-1d8c-4c83-9ae4-30f415a2e618",
              "parentUUID": "cf20eae6-41d7-4345-9eb8-f5456782c612",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.visit() - visit a remote url",
              "fullTitle": "Navigation cy.visit() - visit a remote url",
              "timedOut": null,
              "duration": 402,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/visit\n// Visit any sub-domain of your current domain\n// Pass options to the visit\ncy.visit('https://example.cypress.io/commands/navigation', {\n  timeout: 50000,\n  // increase total time for the visit to resolve\n  onBeforeLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  },\n  onLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  }\n});",
              "err": {},
              "uuid": "2eceb239-9ebf-4e8f-b008-112772e18bf2",
              "parentUUID": "cf20eae6-41d7-4345-9eb8-f5456782c612",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96dd4caf-ec81-4690-9df2-946e4e35a7f9",
            "72608c4d-1d8c-4c83-9ae4-30f415a2e618",
            "2eceb239-9ebf-4e8f-b008-112772e18bf2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2327,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e092bc4c-3880-4502-8c30-b1c99ea9143d",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "644f9540-c93e-4756-809c-ce4ad0793fcd",
          "title": "Network Requests",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 1130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200);\n  // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "41cd2ebb-0377-4e24-b742-e7ed0821a7b3",
              "parentUUID": "644f9540-c93e-4756-809c-ce4ad0793fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 544,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "baf9e51e-dcc0-4cb2-bb01-d8eb3bcffdc5",
              "parentUUID": "644f9540-c93e-4756-809c-ce4ad0793fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 492,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "bbe050e9-9292-43fb-a3a4-1c4fbc1d0833",
              "parentUUID": "644f9540-c93e-4756-809c-ce4ad0793fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 819,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number');\n  // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n})\n// note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  });\n  // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100);\n  // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "36a0838b-1cb5-49c6-a5a1-3270f382bb7c",
              "parentUUID": "644f9540-c93e-4756-809c-ce4ad0793fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 823,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE 👀\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "bb00ebbf-18cc-4829-8fc6-d260d518c4d9",
              "parentUUID": "644f9540-c93e-4756-809c-ce4ad0793fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 1307,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist';\n// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n// Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment');\n// we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n});\n// Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment');\n// we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment');\n// our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "14462f82-127c-4175-9541-b9c9f3192e65",
              "parentUUID": "644f9540-c93e-4756-809c-ce4ad0793fcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41cd2ebb-0377-4e24-b742-e7ed0821a7b3",
            "baf9e51e-dcc0-4cb2-bb01-d8eb3bcffdc5",
            "bbe050e9-9292-43fb-a3a4-1c4fbc1d0833",
            "36a0838b-1cb5-49c6-a5a1-3270f382bb7c",
            "bb00ebbf-18cc-4829-8fc6-d260d518c4d9",
            "14462f82-127c-4175-9541-b9c9f3192e65"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5115,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f2d6d175-ca38-49a9-b0df-395bd0dd680c",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "37cadf4a-3ef2-44ff-93ee-436a71fce715",
          "title": "Querying",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.get() - query DOM elements",
              "fullTitle": "Querying cy.get() - query DOM elements",
              "timedOut": null,
              "duration": 420,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/get\ncy.get('#query-btn').should('contain', 'Button');\ncy.get('.query-btn').should('contain', 'Button');\ncy.get('#querying .well>button:first').should('contain', 'Button');\n//              ↲\n// Use CSS selectors just like jQuery\ncy.get('[data-test-id=\"test-example\"]').should('have.class', 'example');\n// 'cy.get()' yields jQuery object, you can get its attribute\n// by invoking `.attr()` method\ncy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example');\n// or you can get element's CSS property\ncy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static');\n// or use assertions directly during 'cy.get()'\n// https://on.cypress.io/assertions\ncy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');",
              "err": {},
              "uuid": "724fd1c4-49d6-410a-b1a2-176e00536f8e",
              "parentUUID": "37cadf4a-3ef2-44ff-93ee-436a71fce715",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.contains() - query DOM elements with matching content",
              "fullTitle": "Querying cy.contains() - query DOM elements with matching content",
              "timedOut": null,
              "duration": 141,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/contains\ncy.get('.query-list').contains('bananas').should('have.class', 'third');\n// we can pass a regexp to `.contains()`\ncy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\ncy.get('.query-list').contains('apples').should('have.class', 'first');\n// passing a selector to contains will\n// yield the selector containing the text\ncy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\ncy.get('.query-button').contains('Save Form').should('have.class', 'btn');",
              "err": {},
              "uuid": "e8973112-177d-48b9-a50e-9d280b178255",
              "parentUUID": "37cadf4a-3ef2-44ff-93ee-436a71fce715",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".within() - query DOM elements within a specific element",
              "fullTitle": "Querying .within() - query DOM elements within a specific element",
              "timedOut": null,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/within\ncy.get('.query-form').within(() => {\n  cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n  cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n});",
              "err": {},
              "uuid": "73a300e0-c460-4f9a-9d2e-71f884fd731a",
              "parentUUID": "37cadf4a-3ef2-44ff-93ee-436a71fce715",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.root() - query the root DOM element",
              "fullTitle": "Querying cy.root() - query the root DOM element",
              "timedOut": null,
              "duration": 129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/root\n// By default, root is the document\ncy.root().should('match', 'html');\ncy.get('.query-ul').within(() => {\n  // In this within, the root is now the ul DOM element\n  cy.root().should('have.class', 'query-ul');\n});",
              "err": {},
              "uuid": "e5c42c5e-d30d-4cac-a75f-38e248a695a1",
              "parentUUID": "37cadf4a-3ef2-44ff-93ee-436a71fce715",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "best practices - selecting elements",
              "fullTitle": "Querying best practices - selecting elements",
              "timedOut": null,
              "duration": 682,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/best-practices#Selecting-Elements\ncy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n  // Worst - too generic, no context\n  cy.get('button').click();\n  // Bad. Coupled to styling. Highly subject to change.\n  cy.get('.btn.btn-large').click();\n  // Average. Coupled to the `name` attribute which has HTML semantics.\n  cy.get('[name=submission]').click();\n  // Better. But still coupled to styling or JS event listeners.\n  cy.get('#main').click();\n  // Slightly better. Uses an ID but also ensures the element\n  // has an ARIA role attribute\n  cy.get('#main[role=button]').click();\n  // Much better. But still coupled to text content that may change.\n  cy.contains('Submit').click();\n  // Best. Insulated from all changes.\n  cy.get('[data-cy=submit]').click();\n});",
              "err": {},
              "uuid": "325a02d7-a23f-464c-b65b-6b3dd6f2d479",
              "parentUUID": "37cadf4a-3ef2-44ff-93ee-436a71fce715",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "724fd1c4-49d6-410a-b1a2-176e00536f8e",
            "e8973112-177d-48b9-a50e-9d280b178255",
            "73a300e0-c460-4f9a-9d2e-71f884fd731a",
            "e5c42c5e-d30d-4cac-a75f-38e248a695a1",
            "325a02d7-a23f-464c-b65b-6b3dd6f2d479"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1497,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0968e0ef-5665-4bef-839b-709a9848c9ba",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "08488fbd-e4c9-49be-b52f-ba6f8e50aed4",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 537,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spy\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  foo() {}\n};\nconst spy = cy.spy(obj, 'foo').as('anyArgs');\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "be17924e-7b21-4235-905a-a352c2feb237",
              "parentUUID": "08488fbd-e4c9-49be-b52f-ba6f8e50aed4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2530,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n  */\n  foo(x) {\n    console.log('obj.foo called with', x);\n  }\n};\ncy.spy(obj, 'foo').as('foo');\nsetTimeout(() => {\n  obj.foo('first');\n}, 500);\nsetTimeout(() => {\n  obj.foo('second');\n}, 2500);\ncy.get('@foo').should('have.been.calledTwice');",
              "err": {},
              "uuid": "f85fbc01-43a9-49a1-a43e-6d23699c1846",
              "parentUUID": "08488fbd-e4c9-49be-b52f-ba6f8e50aed4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/stub\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n  */\n  foo(a, b) {\n    console.log('a', a, 'b', b);\n  }\n};\nconst stub = cy.stub(obj, 'foo').as('foo');\nobj.foo('foo', 'bar');\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "d73f11df-7732-481c-8d41-dd0aca29c29b",
              "parentUUID": "08488fbd-e4c9-49be-b52f-ba6f8e50aed4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 225,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#clock-div').click().should('have.text', '1489449600');",
              "err": {},
              "uuid": "890883dc-f522-486d-832c-c6e2f872776c",
              "parentUUID": "08488fbd-e4c9-49be-b52f-ba6f8e50aed4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 274,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#tick-div').click().should('have.text', '1489449600');\ncy.tick(10000); // 10 seconds passed\ncy.get('#tick-div').click().should('have.text', '1489449610');",
              "err": {},
              "uuid": "30f91207-5d5c-4218-bb01-b0d746004c05",
              "parentUUID": "08488fbd-e4c9-49be-b52f-ba6f8e50aed4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n  */\n  greet(name) {\n    return `Hello, ${name}!`;\n  }\n};\ncy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\nexpect(greeter.greet('World')).to.equal('Hi');\nexpect(() => greeter.greet(42)).to.throw('Invalid name');\nexpect(greeter.greet).to.have.been.calledTwice;\n// non-matched calls goes the actual method\nexpect(greeter.greet()).to.equal('Hello, undefined!');",
              "err": {},
              "uuid": "d4560db8-2c12-4993-9043-6d055bd7530a",
              "parentUUID": "08488fbd-e4c9-49be-b52f-ba6f8e50aed4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n  */\n  add(a, b) {\n    return a + b;\n  }\n};\nconst spy = cy.spy(calculator, 'add').as('add');\nexpect(calculator.add(2, 3)).to.equal(5);\n// if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3);\n// let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number);\n// alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3));\n// match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3);\n// match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n/**\n * Returns true if the given number is even\n * @param {number} x\n */\nconst isEven = x => x % 2 === 0;\n// expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isGreaterThan = limit => x => x > limit;\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isLessThan = limit => x => x < limit;\n// you can combine several matchers using \"and\", \"or\"\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3)));\n// matchers can be used from BDD assertions\ncy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3));\n// you can alias matchers for shorter test code\nconst {\n  match: M\n} = Cypress.sinon;\ncy.get('@add').should('have.been.calledWith', M.number, M(3));",
              "err": {},
              "uuid": "9697cc31-8ca3-4b7f-b7ed-1674e85f027b",
              "parentUUID": "08488fbd-e4c9-49be-b52f-ba6f8e50aed4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be17924e-7b21-4235-905a-a352c2feb237",
            "f85fbc01-43a9-49a1-a43e-6d23699c1846",
            "d73f11df-7732-481c-8d41-dd0aca29c29b",
            "890883dc-f522-486d-832c-c6e2f872776c",
            "30f91207-5d5c-4218-bb01-b0d746004c05",
            "d4560db8-2c12-4993-9043-6d055bd7530a",
            "9697cc31-8ca3-4b7f-b7ed-1674e85f027b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3716,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9ff496f8-fec7-4070-8139-9c5df9f3ab20",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5b63900d-9103-446e-92e5-3ea58407b7cd",
          "title": "Local Storage / Session Storage",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "fullTitle": "Local Storage / Session Storage cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "timedOut": null,
              "duration": 648,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearlocalstorage\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// clearLocalStorage() yields the localStorage object\ncy.clearLocalStorage().should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.be.null;\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear key matching string in localStorage\ncy.clearLocalStorage('prop1').should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.eq('blue');\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear keys matching regex in localStorage\ncy.clearLocalStorage(/prop1|2/).should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});",
              "err": {},
              "uuid": "318b96eb-b00c-4bb7-b019-6fc7dfa68aa8",
              "parentUUID": "5b63900d-9103-446e-92e5-3ea58407b7cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "timedOut": null,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getalllocalstorage\ncy.get('.ls-btn').click();\n// getAllLocalStorage() yields a map of origins to localStorage values\ncy.getAllLocalStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if localStorage is set on them\n    'https://example.cypress.io': {\n      'prop1': 'red',\n      'prop2': 'blue',\n      'prop3': 'magenta'\n    }\n  });\n});",
              "err": {},
              "uuid": "9abc161e-8c60-4c5d-ad19-5346a2cf4cde",
              "parentUUID": "5b63900d-9103-446e-92e5-3ea58407b7cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "timedOut": null,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearalllocalstorage\ncy.get('.ls-btn').click();\n// clearAllLocalStorage() yields null\ncy.clearAllLocalStorage().should(() => {\n  expect(sessionStorage.getItem('prop1')).to.be.null;\n  expect(sessionStorage.getItem('prop2')).to.be.null;\n  expect(sessionStorage.getItem('prop3')).to.be.null;\n});",
              "err": {},
              "uuid": "fbd67ebc-e112-41e1-89b5-e7ed118668f8",
              "parentUUID": "5b63900d-9103-446e-92e5-3ea58407b7cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 196,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallsessionstorage\ncy.get('.ls-btn').click();\n// getAllSessionStorage() yields a map of origins to sessionStorage values\ncy.getAllSessionStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if sessionStorage is set on them\n    'https://example.cypress.io': {\n      'prop4': 'cyan',\n      'prop5': 'yellow',\n      'prop6': 'black'\n    }\n  });\n});",
              "err": {},
              "uuid": "2f97ff02-ec81-40ff-9893-0611ffe97e94",
              "parentUUID": "5b63900d-9103-446e-92e5-3ea58407b7cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 207,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallsessionstorage\ncy.get('.ls-btn').click();\n// clearAllSessionStorage() yields null\ncy.clearAllSessionStorage().should(() => {\n  expect(sessionStorage.getItem('prop4')).to.be.null;\n  expect(sessionStorage.getItem('prop5')).to.be.null;\n  expect(sessionStorage.getItem('prop6')).to.be.null;\n});",
              "err": {},
              "uuid": "c3a969c1-ad79-4a04-91f2-36e22bee3640",
              "parentUUID": "5b63900d-9103-446e-92e5-3ea58407b7cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "318b96eb-b00c-4bb7-b019-6fc7dfa68aa8",
            "9abc161e-8c60-4c5d-ad19-5346a2cf4cde",
            "fbd67ebc-e112-41e1-89b5-e7ed118668f8",
            "2f97ff02-ec81-40ff-9893-0611ffe97e94",
            "c3a969c1-ad79-4a04-91f2-36e22bee3640"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1457,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e7113c21-3460-4318-8c54-e7ca60c54bed",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
          "title": "Traversal",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".children() - get child DOM elements",
              "fullTitle": "Traversal .children() - get child DOM elements",
              "timedOut": null,
              "duration": 452,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/children\ncy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');",
              "err": {},
              "uuid": "cbb3b916-c2ba-4850-8b26-89c29e0bb7b6",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".closest() - get closest ancestor DOM element",
              "fullTitle": "Traversal .closest() - get closest ancestor DOM element",
              "timedOut": null,
              "duration": 116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/closest\ncy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');",
              "err": {},
              "uuid": "f5cd9f3c-da57-4f98-bade-c5eebbe14c1f",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".eq() - get a DOM element at a specific index",
              "fullTitle": "Traversal .eq() - get a DOM element at a specific index",
              "timedOut": null,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/eq\ncy.get('.traversal-list>li').eq(1).should('contain', 'siamese');",
              "err": {},
              "uuid": "a3bd1f40-25a7-4a76-a445-47d0db623254",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".filter() - get DOM elements that match the selector",
              "fullTitle": "Traversal .filter() - get DOM elements that match the selector",
              "timedOut": null,
              "duration": 131,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/filter\ncy.get('.traversal-nav>li').filter('.active').should('contain', 'About');",
              "err": {},
              "uuid": "927688f9-1240-4fa0-ad45-ab73e12e14ee",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".find() - get descendant DOM elements of the selector",
              "fullTitle": "Traversal .find() - get descendant DOM elements of the selector",
              "timedOut": null,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/find\ncy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);",
              "err": {},
              "uuid": "2612f031-21d0-4159-9578-05818295c6c4",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".first() - get first DOM element",
              "fullTitle": "Traversal .first() - get first DOM element",
              "timedOut": null,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/first\ncy.get('.traversal-table td').first().should('contain', '1');",
              "err": {},
              "uuid": "07d2e58c-32f5-4204-b77d-d6b98fc2aaa2",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".last() - get last DOM element",
              "fullTitle": "Traversal .last() - get last DOM element",
              "timedOut": null,
              "duration": 119,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/last\ncy.get('.traversal-buttons .btn').last().should('contain', 'Submit');",
              "err": {},
              "uuid": "52a843a5-8b80-424c-8436-80477328f6e3",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".next() - get next sibling DOM element",
              "fullTitle": "Traversal .next() - get next sibling DOM element",
              "timedOut": null,
              "duration": 131,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/next\ncy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');",
              "err": {},
              "uuid": "52587adf-6749-45e7-8804-ee326559f8d2",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextAll() - get all next sibling DOM elements",
              "fullTitle": "Traversal .nextAll() - get all next sibling DOM elements",
              "timedOut": null,
              "duration": 177,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextall\ncy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);",
              "err": {},
              "uuid": "7df186d8-4de4-4b4f-bf62-5663b30ec2cd",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextUntil() - get next sibling DOM elements until next el",
              "fullTitle": "Traversal .nextUntil() - get next sibling DOM elements until next el",
              "timedOut": null,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextuntil\ncy.get('#veggies').nextUntil('#nuts').should('have.length', 3);",
              "err": {},
              "uuid": "ac126465-f5ac-4aef-a7c3-129a9731b78c",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".not() - remove DOM elements from set of DOM elements",
              "fullTitle": "Traversal .not() - remove DOM elements from set of DOM elements",
              "timedOut": null,
              "duration": 128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/not\ncy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');",
              "err": {},
              "uuid": "988d3b80-e3b3-445d-b9e3-3f6947d0a787",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parent() - get parent DOM element from DOM elements",
              "fullTitle": "Traversal .parent() - get parent DOM element from DOM elements",
              "timedOut": null,
              "duration": 186,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parent\ncy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');",
              "err": {},
              "uuid": "a7a93d8b-4fca-4a15-bc1c-fd1794cdd9e6",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parents() - get parent DOM elements from DOM elements",
              "fullTitle": "Traversal .parents() - get parent DOM elements from DOM elements",
              "timedOut": null,
              "duration": 124,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parents\ncy.get('.traversal-cite').parents().should('match', 'blockquote');",
              "err": {},
              "uuid": "d0cae6c2-7499-4e1a-9c05-940bf7dc5bb8",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parentsUntil() - get parent DOM elements from DOM elements until el",
              "fullTitle": "Traversal .parentsUntil() - get parent DOM elements from DOM elements until el",
              "timedOut": null,
              "duration": 129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parentsuntil\ncy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);",
              "err": {},
              "uuid": "182ce24c-8789-4f1a-b59e-35b2dd717e0c",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prev() - get previous sibling DOM element",
              "fullTitle": "Traversal .prev() - get previous sibling DOM element",
              "timedOut": null,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prev\ncy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');",
              "err": {},
              "uuid": "bd148170-48fa-4da0-b1c9-b00d9879e384",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevAll() - get all previous sibling DOM elements",
              "fullTitle": "Traversal .prevAll() - get all previous sibling DOM elements",
              "timedOut": null,
              "duration": 157,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevall\ncy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);",
              "err": {},
              "uuid": "1046c49b-1b23-468f-9b74-3a490c1044dc",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevUntil() - get all previous sibling DOM elements until el",
              "fullTitle": "Traversal .prevUntil() - get all previous sibling DOM elements until el",
              "timedOut": null,
              "duration": 128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevuntil\ncy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);",
              "err": {},
              "uuid": "03efeaa7-d689-40b9-af8e-26215bc31e4a",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".siblings() - get all sibling DOM elements",
              "fullTitle": "Traversal .siblings() - get all sibling DOM elements",
              "timedOut": null,
              "duration": 118,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/siblings\ncy.get('.traversal-pills .active').siblings().should('have.length', 2);",
              "err": {},
              "uuid": "55b92628-0fc7-43cb-b0b1-e69eca6c8550",
              "parentUUID": "a4e78b2a-faa4-469f-970c-1b17ae0978d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbb3b916-c2ba-4850-8b26-89c29e0bb7b6",
            "f5cd9f3c-da57-4f98-bade-c5eebbe14c1f",
            "a3bd1f40-25a7-4a76-a445-47d0db623254",
            "927688f9-1240-4fa0-ad45-ab73e12e14ee",
            "2612f031-21d0-4159-9578-05818295c6c4",
            "07d2e58c-32f5-4204-b77d-d6b98fc2aaa2",
            "52a843a5-8b80-424c-8436-80477328f6e3",
            "52587adf-6749-45e7-8804-ee326559f8d2",
            "7df186d8-4de4-4b4f-bf62-5663b30ec2cd",
            "ac126465-f5ac-4aef-a7c3-129a9731b78c",
            "988d3b80-e3b3-445d-b9e3-3f6947d0a787",
            "a7a93d8b-4fca-4a15-bc1c-fd1794cdd9e6",
            "d0cae6c2-7499-4e1a-9c05-940bf7dc5bb8",
            "182ce24c-8789-4f1a-b59e-35b2dd717e0c",
            "bd148170-48fa-4da0-b1c9-b00d9879e384",
            "1046c49b-1b23-468f-9b74-3a490c1044dc",
            "03efeaa7-d689-40b9-af8e-26215bc31e4a",
            "55b92628-0fc7-43cb-b0b1-e69eca6c8550"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2720,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a6c72825-e32a-4f87-8a8f-37561aaf4018",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6647f50-4914-459c-8397-9baaa412d0a7",
          "title": "Utilities",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 663,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  let ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "e93bc991-aa99-4f9e-8c9f-e7d0ac981787",
              "parentUUID": "a6647f50-4914-459c-8397-9baaa412d0a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/$\nlet $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active').click().should('have.class', 'active');",
              "err": {},
              "uuid": "75f0b37d-fb1e-40fe-875e-5330dcb0515b",
              "parentUUID": "a6647f50-4914-459c-8397-9baaa412d0a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 549,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then($div => {\n  // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n  // get the dataUrl string for the javascript-logo\n  return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n    // create an <img> element and set its src to the dataUrl\n    let img = Cypress.$('<img />', {\n      src: dataUrl\n    });\n    // need to explicitly return cy here since we are initially returning\n    // the Cypress.Blob.imgSrcToDataURL promise to our test\n    // append the image\n    $div.append(img);\n    cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl);\n  });\n});",
              "err": {},
              "uuid": "8a73701a-be4a-4356-925f-88cd6331be8c",
              "parentUUID": "a6647f50-4914-459c-8397-9baaa412d0a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/minimatch\nlet matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be.true;\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.false;\n// ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.true;\n// whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be.false;",
              "err": {},
              "uuid": "9af63af7-fcf1-4883-b61a-d81f825a716a",
              "parentUUID": "a6647f50-4914-459c-8397-9baaa412d0a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/promise\nlet waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  return new Cypress.Promise((resolve, reject) => {\n    setTimeout(() => {\n      // set waited to true\n      waited = true;\n      // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(() => {\n  // return a promise to cy.then() that\n  // is awaited until it resolves\n  return waitOneSecond().then(str => {\n    expect(str).to.eq('foo');\n    expect(waited).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "f66ce905-8cc2-4d6f-a5b6-a6eb1978655d",
              "parentUUID": "a6647f50-4914-459c-8397-9baaa412d0a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e93bc991-aa99-4f9e-8c9f-e7d0ac981787",
            "75f0b37d-fb1e-40fe-875e-5330dcb0515b",
            "8a73701a-be4a-4356-925f-88cd6331be8c",
            "9af63af7-fcf1-4883-b61a-d81f825a716a",
            "f66ce905-8cc2-4d6f-a5b6-a6eb1978655d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2668,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "31536bcf-ac8c-4a5e-8ed5-e3eaf12fdcb6",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "19d0f898-6473-4c4d-b6c2-b3c5930c8f15",
          "title": "Viewport",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.viewport() - set the viewport size and dimension",
              "fullTitle": "Viewport cy.viewport() - set the viewport size and dimension",
              "timedOut": null,
              "duration": 2950,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/viewport\ncy.get('#navbar').should('be.visible');\ncy.viewport(320, 480);\n// the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible');\ncy.get('.navbar-toggle').should('be.visible').click();\ncy.get('.nav').find('a').should('be.visible');\n// lets see what our app looks like on a super large screen\ncy.viewport(2999, 2999);\n// cy.viewport() accepts a set of preset sizes\n// to easily set the screen to a device's width and height\n// We added a cy.wait() between each viewport change so you can see\n// the change otherwise it is a little too fast to see :)\ncy.viewport('macbook-15');\ncy.wait(200);\ncy.viewport('macbook-13');\ncy.wait(200);\ncy.viewport('macbook-11');\ncy.wait(200);\ncy.viewport('ipad-2');\ncy.wait(200);\ncy.viewport('ipad-mini');\ncy.wait(200);\ncy.viewport('iphone-6+');\ncy.wait(200);\ncy.viewport('iphone-6');\ncy.wait(200);\ncy.viewport('iphone-5');\ncy.wait(200);\ncy.viewport('iphone-4');\ncy.wait(200);\ncy.viewport('iphone-3');\ncy.wait(200);\n// cy.viewport() accepts an orientation for all presets\n// the default orientation is 'portrait'\ncy.viewport('ipad-2', 'portrait');\ncy.wait(200);\ncy.viewport('iphone-4', 'landscape');\ncy.wait(200);\n// The viewport will be reset back to the default dimensions\n// in between tests (the  default can be set in cypress.config.{js|ts})",
              "err": {},
              "uuid": "697cbe32-0484-4ba0-abb8-2e3039ba8d86",
              "parentUUID": "19d0f898-6473-4c4d-b6c2-b3c5930c8f15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "697cbe32-0484-4ba0-abb8-2e3039ba8d86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2950,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9498c092-6ea8-4630-a7ba-fd1337e1b617",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a4071983-0565-4415-b59e-8eb474de4c25",
          "title": "Waiting",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.wait() - wait for a specific amount of time",
              "fullTitle": "Waiting cy.wait() - wait for a specific amount of time",
              "timedOut": null,
              "duration": 4701,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.wait-input1').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input2').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input3').type('Wait 1000ms after typing');\ncy.wait(1000);",
              "err": {},
              "uuid": "35ce99de-564b-478e-9a8a-720ac99adf0a",
              "parentUUID": "a4071983-0565-4415-b59e-8eb474de4c25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wait() - wait for a specific route",
              "fullTitle": "Waiting cy.wait() - wait for a specific route",
              "timedOut": null,
              "duration": 544,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// wait for GET comments/1\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);",
              "err": {},
              "uuid": "b32c6c55-847c-4db6-bc2c-a3e92b37f094",
              "parentUUID": "a4071983-0565-4415-b59e-8eb474de4c25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "35ce99de-564b-478e-9a8a-720ac99adf0a",
            "b32c6c55-847c-4db6-bc2c-a3e92b37f094"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5245,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1a46872d-7849-4a7c-a175-fa3cfc3a4de6",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a08b604a-cc15-42a5-bb81-8212f3e6a245",
          "title": "Window",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.window() - get the global window object",
              "fullTitle": "Window cy.window() - get the global window object",
              "timedOut": null,
              "duration": 408,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/window\ncy.window().should('have.property', 'top');",
              "err": {},
              "uuid": "d4c1c2e7-6774-43cc-bfa4-529e4f2a3d7e",
              "parentUUID": "a08b604a-cc15-42a5-bb81-8212f3e6a245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.document() - get the document object",
              "fullTitle": "Window cy.document() - get the document object",
              "timedOut": null,
              "duration": 110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/document\ncy.document().should('have.property', 'charset').and('eq', 'UTF-8');",
              "err": {},
              "uuid": "05bca3d4-670b-4f5a-a459-a7c597dbd67a",
              "parentUUID": "a08b604a-cc15-42a5-bb81-8212f3e6a245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.title() - get the title",
              "fullTitle": "Window cy.title() - get the title",
              "timedOut": null,
              "duration": 130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/title\ncy.title().should('include', 'Kitchen Sink');",
              "err": {},
              "uuid": "7a11d452-c1ea-4225-9605-19ce12b58aa0",
              "parentUUID": "a08b604a-cc15-42a5-bb81-8212f3e6a245",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4c1c2e7-6774-43cc-bfa4-529e4f2a3d7e",
            "05bca3d4-670b-4f5a-a459-a7c597dbd67a",
            "7a11d452-c1ea-4225-9605-19ce12b58aa0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 648,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "36e1fa4b-9a79-4cf4-aab4-d0e2681afcd4",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f235e0f0-7a3a-4cf5-9103-cb07b2b924b2",
          "title": "example to-do app",
          "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
          "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1272,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "4c3f5aee-eae3-4b0f-aca4-ff494fdc09eb",
              "parentUUID": "f235e0f0-7a3a-4cf5-9103-cb07b2b924b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 593,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat';\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "52bd3b3d-a9f5-48e9-b3b9-f69601e3c597",
              "parentUUID": "f235e0f0-7a3a-4cf5-9103-cb07b2b924b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 256,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "532fb8ab-4567-4a15-a744-0d2c5bb5e7d4",
              "parentUUID": "f235e0f0-7a3a-4cf5-9103-cb07b2b924b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "b77b2817-e85c-4833-b499-f495ecf54f23",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 379,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "59a89749-883e-41f0-b059-8d4f9fe6578b",
                  "parentUUID": "b77b2817-e85c-4833-b499-f495ecf54f23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 319,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "2a9c4478-74df-4996-bdc7-6de7e2f30682",
                  "parentUUID": "b77b2817-e85c-4833-b499-f495ecf54f23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 400,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "d5515a84-251c-4d1d-9501-4ee3b3979b58",
                  "parentUUID": "b77b2817-e85c-4833-b499-f495ecf54f23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59a89749-883e-41f0-b059-8d4f9fe6578b",
                "2a9c4478-74df-4996-bdc7-6de7e2f30682",
                "d5515a84-251c-4d1d-9501-4ee3b3979b58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1098,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "4c3f5aee-eae3-4b0f-aca4-ff494fdc09eb",
            "52bd3b3d-a9f5-48e9-b3b9-f69601e3c597",
            "532fb8ab-4567-4a15-a744-0d2c5bb5e7d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\reports\\.jsons",
        "charts": true,
        "reportPageTitle": "Cypress Test Report",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "saveJson": true
      },
      "version": "6.2.0"
    }
  }
}