{
  "stats": {
    "suites": 23,
    "tests": 134,
    "passes": 132,
    "pending": 0,
    "failures": 2,
    "testsRegistered": 134,
    "passPercent": 98.50746268656717,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-06-29T01:08:43.348Z",
    "end": "2025-06-29T01:14:18.838Z",
    "duration": 335490
  },
  "results": [
    {
      "uuid": "990229f0-f406-4fa7-afe2-39163b4f4704",
      "title": "",
      "fullFile": "cypress\\e2e\\book-store\\TC1 - error sample login.cy.js",
      "file": "cypress\\e2e\\book-store\\TC1 - error sample login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "43f042e3-c0ef-4cdb-bb6c-074527ca1fc3",
          "title": "error sample book store login page",
          "fullFile": "cypress\\e2e\\book-store\\TC1 - error sample login.cy.js",
          "file": "cypress\\e2e\\book-store\\TC1 - error sample login.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "tc01 - should display login form elements",
              "fullTitle": "error sample book store login page tc01 - should display login form elements",
              "timedOut": null,
              "duration": 20219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName-label').should('be.visible');\ncy.get('#password-label').should('be.visible');\ncy.get('#login').should('exist');\ncy.get('#newUser').should('exist');\ncy.get('.text-center').should('contain', 'Login');",
              "err": {},
              "uuid": "87005ae1-8286-4094-bab1-06201d7f1968",
              "parentUUID": "43f042e3-c0ef-4cdb-bb6c-074527ca1fc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tc02 - valid login",
              "fullTitle": "error sample book store login page tc02 - valid login",
              "timedOut": null,
              "duration": 4492,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"data:image/png;base64, \"\n    }\n]",
              "code": "cy.get('#userName').type('alicia.tan92');\ncy.get('#password').type('P@ssw0rd8!');\ncy.get('#login').click();\n// assert profile page\ncy.url().should('include', '/profile');\ncy.get('.main-header').should('contain', 'Profile');\n// go back to login for next tests\ncy.visit('/login');",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#userName`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#userName`, but never found it.\n    at Context.eval (webpack://cypress_project/./cypress/e2e/book-store/TC1 - error sample login.cy.js:22:11)",
                "diff": null
              },
              "uuid": "f5d0e7f8-19da-4a68-ab71-8fb7cd8dec03",
              "parentUUID": "43f042e3-c0ef-4cdb-bb6c-074527ca1fc3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87005ae1-8286-4094-bab1-06201d7f1968"
          ],
          "failures": [
            "f5d0e7f8-19da-4a68-ab71-8fb7cd8dec03"
          ],
          "pending": [],
          "skipped": [],
          "duration": 24711,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8e02a04f-e2e1-4c2a-9a02-68b8591778e1",
      "title": "",
      "fullFile": "cypress\\e2e\\book-store\\TC1 - login.cy.js",
      "file": "cypress\\e2e\\book-store\\TC1 - login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f87657f5-0c7c-41e0-ae6a-91c32c6e0973",
          "title": "Book Store Login Page",
          "fullFile": "cypress\\e2e\\book-store\\TC1 - login.cy.js",
          "file": "cypress\\e2e\\book-store\\TC1 - login.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC01 - Login page: should display login form elements correctly",
              "fullTitle": "Book Store Login Page TC01 - Login page: should display login form elements correctly",
              "timedOut": null,
              "duration": 5151,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName-label').should('be.visible');\ncy.get('#password-label').should('be.visible');\ncy.get('#login').should('exist');\ncy.get('#newUser').should('exist');\ncy.get('.text-center').should('contain', 'Login');",
              "err": {},
              "uuid": "646dcdf0-d332-4b79-add9-60b4006c274d",
              "parentUUID": "f87657f5-0c7c-41e0-ae6a-91c32c6e0973",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC02 - Login with valid data: should able to login",
              "fullTitle": "Book Store Login Page TC02 - Login with valid data: should able to login",
              "timedOut": null,
              "duration": 14133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName.form-control').type('alicia.tan92');\ncy.get('#password.form-control').type('P@ssw0rd8!');\ncy.get('#login').click();\ncy.url().should('include', '/profile');",
              "err": {},
              "uuid": "419a7c1f-c9e4-4305-abb8-ab18a69c0c6d",
              "parentUUID": "f87657f5-0c7c-41e0-ae6a-91c32c6e0973",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC03 - Login with invalid data: should show error",
              "fullTitle": "Book Store Login Page TC03 - Login with invalid data: should show error",
              "timedOut": null,
              "duration": 11585,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName').type('wrong.user');\ncy.get('#password').type('wrongPassword123');\ncy.get('#login').click();\ncy.get('#name').should('be.visible').and('contain', 'Invalid username or password!').and('have.css', 'color', 'rgb(255, 0, 0)');",
              "err": {},
              "uuid": "6ab578a0-75e4-401c-8210-c82936132caf",
              "parentUUID": "f87657f5-0c7c-41e0-ae6a-91c32c6e0973",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC04 - Login with empty form: should show error",
              "fullTitle": "Book Store Login Page TC04 - Login with empty form: should show error",
              "timedOut": null,
              "duration": 7811,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName').click();\ncy.get('#password').click();\ncy.get('#login').click();\n// check if both inputs have the 'is-invalid' class (red highlight)\ncy.get('#userName').should('have.class', 'is-invalid');\ncy.get('#password').should('have.class', 'is-invalid');",
              "err": {},
              "uuid": "1e8ef598-6e7b-42f0-bd68-f65dfbeffcae",
              "parentUUID": "f87657f5-0c7c-41e0-ae6a-91c32c6e0973",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "646dcdf0-d332-4b79-add9-60b4006c274d",
            "419a7c1f-c9e4-4305-abb8-ab18a69c0c6d",
            "6ab578a0-75e4-401c-8210-c82936132caf",
            "1e8ef598-6e7b-42f0-bd68-f65dfbeffcae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38680,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "329cfbce-7a4b-40d5-bead-156c7588cb78",
      "title": "",
      "fullFile": "cypress\\e2e\\book-store\\TC1 - optimize.cy.js",
      "file": "cypress\\e2e\\book-store\\TC1 - optimize.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0accf937-78a1-45cb-a7c0-a336b71836fb",
          "title": "book store login page",
          "fullFile": "cypress\\e2e\\book-store\\TC1 - optimize.cy.js",
          "file": "cypress\\e2e\\book-store\\TC1 - optimize.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "tc01 - login page: should display login form elements correctly",
              "fullTitle": "book store login page tc01 - login page: should display login form elements correctly",
              "timedOut": null,
              "duration": 15967,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#userName-label').should('be.visible');\ncy.get('#password-label').should('be.visible');\ncy.get('#login').should('exist');\ncy.get('#newUser').should('exist');\ncy.get('.text-center').should('contain', 'Login');",
              "err": {},
              "uuid": "0ccab917-8fbd-4e86-b400-5502f377408a",
              "parentUUID": "0accf937-78a1-45cb-a7c0-a336b71836fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tc02 - login with valid data: should able to login",
              "fullTitle": "book store login page tc02 - login with valid data: should able to login",
              "timedOut": null,
              "duration": 12601,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsername().type('alicia.tan92');\ncy.getPassword().type('P@ssw0rd8!');\ncy.get('#login').click();\ncy.url().should('include', '/profile');",
              "err": {},
              "uuid": "3bee9853-f455-4bef-8d99-177fbd88d375",
              "parentUUID": "0accf937-78a1-45cb-a7c0-a336b71836fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tc03 - login with invalid data: should show error",
              "fullTitle": "book store login page tc03 - login with invalid data: should show error",
              "timedOut": null,
              "duration": 11323,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsername().type('wrong.user');\ncy.getPassword().type('wrongPassword123');\ncy.get('#login').click();\ncy.get('#name').should('be.visible').and('contain', 'Invalid username or password!').and('have.css', 'color', 'rgb(255, 0, 0)');",
              "err": {},
              "uuid": "cd506303-f251-42ec-a001-99e34f68f7ed",
              "parentUUID": "0accf937-78a1-45cb-a7c0-a336b71836fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tc04 - login with empty form: should show error",
              "fullTitle": "book store login page tc04 - login with empty form: should show error",
              "timedOut": null,
              "duration": 8187,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsername().click();\ncy.getPassword().click();\ncy.get('#login').click();\ncy.getUsername().should('have.class', 'is-invalid');\ncy.getPassword().should('have.class', 'is-invalid');",
              "err": {},
              "uuid": "a1807f4b-242b-4520-ab95-1043c471132e",
              "parentUUID": "0accf937-78a1-45cb-a7c0-a336b71836fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ccab917-8fbd-4e86-b400-5502f377408a",
            "3bee9853-f455-4bef-8d99-177fbd88d375",
            "cd506303-f251-42ec-a001-99e34f68f7ed",
            "a1807f4b-242b-4520-ab95-1043c471132e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48078,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d1109485-c139-4add-bbe6-23d7a8da7af6",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "893404c4-4568-4468-8eea-3523c738e8e0",
          "title": "Actions",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 4975,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com')\n// .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}')\n// .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}')\n// Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled')\n// Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "a366c2d9-c686-4ce0-96fc-063396509817",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 602,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "a4a5f460-7713-48de-b303-a9891111e42b",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 930,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "6a5db412-e48f-4b1e-9d5c-996498c30e24",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 1082,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "5cdb3a51-d994-4845-bf02-cb40d25a4717",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 904,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "3f3a0f35-1b55-4626-8206-8a3a35003a60",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 3291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click();\n// You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight');\n// .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165);\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n});\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "1099291e-67f8-4406-a54d-7d0e6022d68a",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 1134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "a6c3d0a6-a9cf-4129-b755-016967baf40b",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 721,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "4a611353-1d5b-44e7-98de-297488a6e3ce",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1650,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked');\n// .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked');\n// .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked');\n// Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "358ffa81-950e-40b8-89ad-8aacb6c4426a",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1547,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked');\n// .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked');\n// .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked');\n// Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "9a95dad8-4dc4-4876-b75f-247bd5536fe7",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1703,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--');\n// Select option(s) with matching text content\ncy.get('.action-select').select('apples');\n// confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas'])\n// when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas')\n// can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "7a287b76-6308-47ec-8815-8c1e6beb7f27",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 957,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible');\n// scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible');\n// Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible');\n// Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "6a146417-4e8b-426b-9221-28c990bc2e1a",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 881,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "24d2561f-7a5a-4d96-af68-e7fbe1c518b6",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2683,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right');\n// or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250);\n// or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%');\n// control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n});\n// control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "f079c7d7-a978-47c8-b15e-27546e5101d5",
              "parentUUID": "893404c4-4568-4468-8eea-3523c738e8e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a366c2d9-c686-4ce0-96fc-063396509817",
            "a4a5f460-7713-48de-b303-a9891111e42b",
            "6a5db412-e48f-4b1e-9d5c-996498c30e24",
            "5cdb3a51-d994-4845-bf02-cb40d25a4717",
            "3f3a0f35-1b55-4626-8206-8a3a35003a60",
            "1099291e-67f8-4406-a54d-7d0e6022d68a",
            "a6c3d0a6-a9cf-4129-b755-016967baf40b",
            "4a611353-1d5b-44e7-98de-297488a6e3ce",
            "358ffa81-950e-40b8-89ad-8aacb6c4426a",
            "9a95dad8-4dc4-4876-b75f-247bd5536fe7",
            "7a287b76-6308-47ec-8815-8c1e6beb7f27",
            "6a146417-4e8b-426b-9221-28c990bc2e1a",
            "24d2561f-7a5a-4d96-af68-e7fbe1c518b6",
            "f079c7d7-a978-47c8-b15e-27546e5101d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23060,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "abb946c2-9d1d-484d-b707-67287c5f0874",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cfb0b9d7-bab3-48ce-b1a9-27bab5564940",
          "title": "Aliasing",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 919,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn');\n// when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "1159cdb3-ca40-4d51-bdeb-7d592f668c54",
              "parentUUID": "cfb0b9d7-bab3-48ce-b1a9-27bab5564940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 2025,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "34a55f65-a10e-4955-ba53-461ad607567a",
              "parentUUID": "cfb0b9d7-bab3-48ce-b1a9-27bab5564940",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1159cdb3-ca40-4d51-bdeb-7d592f668c54",
            "34a55f65-a10e-4955-ba53-461ad607567a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2944,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "961eec7a-6b08-4a09-92b8-4ad5ddc5d5b9",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7f4eb275-a097-4df5-8e51-d3136a3fbce9",
          "title": "Assertions",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8fef1b4d-4307-4712-9644-846060a58315",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 842,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first()\n// checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content')\n// chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td')\n// to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i);\n// a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last')\n// finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible');\n// for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "a9aa24b9-06e7-44cd-ae5d-03c5b797c9e5",
                  "parentUUID": "8fef1b4d-4307-4712-9644-846060a58315",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 401,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "0030015e-fd15-41e9-a041-b21db80aa93b",
                  "parentUUID": "8fef1b4d-4307-4712-9644-846060a58315",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9aa24b9-06e7-44cd-ae5d-03c5b797c9e5",
                "0030015e-fd15-41e9-a041-b21db80aa93b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1243,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c22b32aa-b121-4720-ad2f-eea6cebafdd9",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 403,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n});\n// matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "1bee3544-d60b-4972-9fa9-952047e69293",
                  "parentUUID": "c22b32aa-b121-4720-ad2f-eea6cebafdd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 478,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  const texts = $p.map((i, el) => Cypress.$(el).text());\n  // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get();\n  // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3);\n  // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "4e0c2440-ff0d-44d7-9566-c7f031f724ca",
                  "parentUUID": "c22b32aa-b121-4720-ad2f-eea6cebafdd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 444,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div')\n// .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n})\n// .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "95933c04-b6ab-4919-b734-b839e6952fa5",
                  "parentUUID": "c22b32aa-b121-4720-ad2f-eea6cebafdd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 446,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "83f2f346-8818-4ee8-8ba8-da56aeddd30e",
                  "parentUUID": "c22b32aa-b121-4720-ad2f-eea6cebafdd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 493,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n */\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n */\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "db828cef-fb16-4719-84df-fe90cc650abc",
                  "parentUUID": "c22b32aa-b121-4720-ad2f-eea6cebafdd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 539,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "46176851-dd4d-43ae-a0e5-391e32afb5a3",
                  "parentUUID": "c22b32aa-b121-4720-ad2f-eea6cebafdd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1966,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "dbe9e923-325b-42e1-a9cc-1c0c9913032d",
                  "parentUUID": "c22b32aa-b121-4720-ad2f-eea6cebafdd9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1bee3544-d60b-4972-9fa9-952047e69293",
                "4e0c2440-ff0d-44d7-9566-c7f031f724ca",
                "95933c04-b6ab-4919-b734-b839e6952fa5",
                "83f2f346-8818-4ee8-8ba8-da56aeddd30e",
                "db828cef-fb16-4719-84df-fe90cc650abc",
                "46176851-dd4d-43ae-a0e5-391e32afb5a3",
                "dbe9e923-325b-42e1-a9cc-1c0c9913032d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4769,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "95a89637-f5db-413c-8c83-0dc28df95e59",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ee43e4a8-8107-4cdf-b522-501bdaaad262",
          "title": "Connectors",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 1235,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "dc7c52eb-1812-4053-bf4a-a9836f05d94d",
              "parentUUID": "ee43e4a8-8107-4cdf-b522-501bdaaad262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 399,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li')\n// calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "050dc4fb-fc36-4c4e-bcb7-55020bf8eeac",
              "parentUUID": "ee43e4a8-8107-4cdf-b522-501bdaaad262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 410,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\ncy.get('.connectors-div').should('be.hidden');\n// https://on.cypress.io/invoke\n// call the jquery method 'show' on the 'div.container'\ncy.get('.connectors-div').invoke('show');\ncy.get('.connectors-div').should('be.visible');",
              "err": {},
              "uuid": "30827b0e-bb54-43a7-a399-ed6a04152db1",
              "parentUUID": "ee43e4a8-8107-4cdf-b522-501bdaaad262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 387,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "2e558e60-5608-4fb7-b9cc-4984426e173e",
              "parentUUID": "ee43e4a8-8107-4cdf-b522-501bdaaad262",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "643eaacb-7a15-4862-b75f-6186809331fa",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 444,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "dd90dcb3-9ecc-4a3f-9e86-2ffd49b4de25",
                  "parentUUID": "643eaacb-7a15-4862-b75f-6186809331fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 485,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "c83a255c-d115-4761-9ae8-4ec6e98b905d",
                  "parentUUID": "643eaacb-7a15-4862-b75f-6186809331fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 503,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "1ab04f8c-a8dd-4726-bd80-c86a941fa679",
                  "parentUUID": "643eaacb-7a15-4862-b75f-6186809331fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 546,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "59ea6768-358a-4d69-80d4-c64d02e26012",
                  "parentUUID": "643eaacb-7a15-4862-b75f-6186809331fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd90dcb3-9ecc-4a3f-9e86-2ffd49b4de25",
                "c83a255c-d115-4761-9ae8-4ec6e98b905d",
                "1ab04f8c-a8dd-4726-bd80-c86a941fa679",
                "59ea6768-358a-4d69-80d4-c64d02e26012"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1978,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "dc7c52eb-1812-4053-bf4a-a9836f05d94d",
            "050dc4fb-fc36-4c4e-bcb7-55020bf8eeac",
            "30827b0e-bb54-43a7-a399-ed6a04152db1",
            "2e558e60-5608-4fb7-b9cc-4984426e173e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2431,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2d371c18-4b55-428a-828d-f7c69df183ce",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0167918-9d3a-40c7-9cee-30dbc1bc84fb",
          "title": "Cookies",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 876,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click();\n// cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "d9b890c4-ff8b-448b-a7da-2494aa4ae09c",
              "parentUUID": "a0167918-9d3a-40c7-9cee-30dbc1bc84fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies for the current domain",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies for the current domain",
              "timedOut": null,
              "duration": 471,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click();\n// cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "e9fe4a26-ef8d-4ddf-86dd-57b18cdbfe7f",
              "parentUUID": "a0167918-9d3a-40c7-9cee-30dbc1bc84fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllCookies() - get all browser cookies",
              "fullTitle": "Cookies cy.getAllCookies() - get all browser cookies",
              "timedOut": null,
              "duration": 472,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\n// cy.getAllCookies() yields an array of cookies\ncy.getAllCookies().should('have.length', 2).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'key');\n  expect(cookies[0]).to.have.property('value', 'value');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n  expect(cookies[1]).to.have.property('name', 'key');\n  expect(cookies[1]).to.have.property('value', 'value');\n  expect(cookies[1]).to.have.property('httpOnly', false);\n  expect(cookies[1]).to.have.property('secure', false);\n  expect(cookies[1]).to.have.property('domain', '.example.com');\n  expect(cookies[1]).to.have.property('path');\n});",
              "err": {},
              "uuid": "6bf22e84-3b59-4ca7-870c-96c2840be6db",
              "parentUUID": "a0167918-9d3a-40c7-9cee-30dbc1bc84fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 487,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar');\n// cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "762f68f8-a38a-4f66-a545-c1e354fc0e67",
              "parentUUID": "a0167918-9d3a-40c7-9cee-30dbc1bc84fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 504,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC');\n// cy.clearCookies() yields null\ncy.clearCookie('token').should('be.null');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "9692261d-bc41-4dfa-adbd-5ee942211a81",
              "parentUUID": "a0167918-9d3a-40c7-9cee-30dbc1bc84fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies for the current domain",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies for the current domain",
              "timedOut": null,
              "duration": 566,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1);\n// cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "0ba5bca9-773a-43eb-a21a-fd84377ca439",
              "parentUUID": "a0167918-9d3a-40c7-9cee-30dbc1bc84fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllCookies() - clear all browser cookies",
              "fullTitle": "Cookies cy.clearAllCookies() - clear all browser cookies",
              "timedOut": null,
              "duration": 581,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\ncy.getAllCookies().should('have.length', 2);\n// cy.clearAllCookies() yields null\ncy.clearAllCookies();\ncy.getAllCookies().should('be.empty');",
              "err": {},
              "uuid": "0654081b-4a38-446c-b7e4-ae82609cb93e",
              "parentUUID": "a0167918-9d3a-40c7-9cee-30dbc1bc84fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9b890c4-ff8b-448b-a7da-2494aa4ae09c",
            "e9fe4a26-ef8d-4ddf-86dd-57b18cdbfe7f",
            "6bf22e84-3b59-4ca7-870c-96c2840be6db",
            "762f68f8-a38a-4f66-a545-c1e354fc0e67",
            "9692261d-bc41-4dfa-adbd-5ee942211a81",
            "0ba5bca9-773a-43eb-a21a-fd84377ca439",
            "0654081b-4a38-446c-b7e4-ae82609cb93e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3957,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "86c1e848-7288-4acf-b0e4-5441ccb6acb0",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ca3a7ada-2de2-4bdc-a444-93c38df06974",
          "title": "Cypress APIs",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f75ab1f9-c601-4e66-9e94-54bbc021fd66",
              "title": "Cypress.Commands",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".add() - create a custom command",
                  "fullTitle": "Cypress APIs Cypress.Commands .add() - create a custom command",
                  "timedOut": null,
                  "duration": 779,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nCypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log';\n  // log the subject to the console\n  console[method]('The subject is', subject);\n  // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n});\n// @ts-ignore\ncy.get('button').console('info').then($button => {\n  // subject is still $button\n});",
                  "err": {},
                  "uuid": "43655782-1bcb-4c6b-9c2a-02e8edcb2d27",
                  "parentUUID": "f75ab1f9-c601-4e66-9e94-54bbc021fd66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43655782-1bcb-4c6b-9c2a-02e8edcb2d27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 779,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afc40603-8b23-4825-91a4-61155e8ad5f1",
              "title": "Cypress.Cookies",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".debug() - enable or disable debugging",
                  "fullTitle": "Cypress APIs Cypress.Cookies .debug() - enable or disable debugging",
                  "timedOut": null,
                  "duration": 525,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Cookies.debug(true);\n// Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
                  "err": {},
                  "uuid": "f137bf06-e6a3-447a-b967-fef515eadb7e",
                  "parentUUID": "afc40603-8b23-4825-91a4-61155e8ad5f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f137bf06-e6a3-447a-b967-fef515eadb7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 525,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aaa20bca-50d8-476a-9a99-33ef01253446",
              "title": "Cypress.arch",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get CPU architecture name of underlying OS",
                  "fullTitle": "Cypress APIs Cypress.arch Get CPU architecture name of underlying OS",
                  "timedOut": null,
                  "duration": 329,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
                  "err": {},
                  "uuid": "afa7a120-281e-4e14-acf6-35b1b40dde6e",
                  "parentUUID": "aaa20bca-50d8-476a-9a99-33ef01253446",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afa7a120-281e-4e14-acf6-35b1b40dde6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 329,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bafa0e76-d921-41da-944a-0c84ff0a2512",
              "title": "Cypress.config()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get and set configuration options",
                  "fullTitle": "Cypress APIs Cypress.config() Get and set configuration options",
                  "timedOut": null,
                  "duration": 664,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"data:image/png;base64, \"\n    }\n]",
                  "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000);\n// this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
                  "err": {
                    "message": "AssertionError: expected { Object (reporter, reporterOptions, ...) } to have property 'baseUrl' of null, but got 'https://demoqa.com'",
                    "estack": "AssertionError: expected { Object (reporter, reporterOptions, ...) } to have property 'baseUrl' of null, but got 'https://demoqa.com'\n    at Context.eval (webpack://cypress_project/./cypress/e2e/2-advanced-examples/cypress_api.cy.js:79:31)",
                    "diff": null
                  },
                  "uuid": "1c79e404-2525-4bf0-8e9e-6b81131951dc",
                  "parentUUID": "bafa0e76-d921-41da-944a-0c84ff0a2512",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1c79e404-2525-4bf0-8e9e-6b81131951dc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 664,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9721c3d7-e425-4ae8-b68d-db05dd86bd5b",
              "title": "Cypress.dom",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".isHidden() - determine if a DOM element is hidden",
                  "fullTitle": "Cypress APIs Cypress.dom .isHidden() - determine if a DOM element is hidden",
                  "timedOut": null,
                  "duration": 343,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0);\n// our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
                  "err": {},
                  "uuid": "1d43cef7-df10-40f1-849b-ca1762ebb0d3",
                  "parentUUID": "9721c3d7-e425-4ae8-b68d-db05dd86bd5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d43cef7-df10-40f1-849b-ca1762ebb0d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 343,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d9c15de-13b7-498c-8e04-8b051837a61b",
              "title": "Cypress.env()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get environment variables",
                  "fullTitle": "Cypress APIs Cypress.env() Get environment variables",
                  "timedOut": null,
                  "duration": 486,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n});\n// get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local');\n// set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/');\n// get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
                  "err": {},
                  "uuid": "86d72647-9893-423e-9a7b-c261e860219e",
                  "parentUUID": "2d9c15de-13b7-498c-8e04-8b051837a61b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86d72647-9893-423e-9a7b-c261e860219e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 486,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb11d055-8e4e-4318-a794-e0006988a966",
              "title": "Cypress.log",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Control what is printed to the Command Log",
                  "fullTitle": "Cypress APIs Cypress.log Control what is printed to the Command Log",
                  "timedOut": null,
                  "duration": 485,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/cypress-log",
                  "err": {},
                  "uuid": "3ebe9373-1086-4ccb-9910-6469e00dc57a",
                  "parentUUID": "eb11d055-8e4e-4318-a794-e0006988a966",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ebe9373-1086-4ccb-9910-6469e00dc57a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 485,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ddb69e43-a85e-4a27-b28d-3da81b254fd6",
              "title": "Cypress.platform",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get underlying OS name",
                  "fullTitle": "Cypress APIs Cypress.platform Get underlying OS name",
                  "timedOut": null,
                  "duration": 454,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
                  "err": {},
                  "uuid": "d30374e1-a733-4654-b991-d18a91fedf92",
                  "parentUUID": "ddb69e43-a85e-4a27-b28d-3da81b254fd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d30374e1-a733-4654-b991-d18a91fedf92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 454,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a4df1a04-dff9-46be-9526-5bde66a9ab5b",
              "title": "Cypress.version",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current version of Cypress being run",
                  "fullTitle": "Cypress APIs Cypress.version Get current version of Cypress being run",
                  "timedOut": null,
                  "duration": 395,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
                  "err": {},
                  "uuid": "2156ffb0-a941-4868-b0f6-dd7f543eaf50",
                  "parentUUID": "a4df1a04-dff9-46be-9526-5bde66a9ab5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2156ffb0-a941-4868-b0f6-dd7f543eaf50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 395,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad4f35b7-43ec-4fe0-ae5e-69e080a0ce53",
              "title": "Cypress.spec",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current spec information",
                  "fullTitle": "Cypress APIs Cypress.spec Get current spec information",
                  "timedOut": null,
                  "duration": 495,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
                  "err": {},
                  "uuid": "fc5a61f6-1116-457d-b2c7-77c96e8d29b0",
                  "parentUUID": "ad4f35b7-43ec-4fe0-ae5e-69e080a0ce53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc5a61f6-1116-457d-b2c7-77c96e8d29b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 495,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e2352116-d664-4577-b29b-48f22379470d",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "88f0efde-9a6a-4736-9b67-53e1550678bb",
          "title": "Files",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 883,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "affed89c-7d3b-41c8-9f2d-57c4ba3b9a25",
              "parentUUID": "88f0efde-9a6a-4736-9b67-53e1550678bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 408,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample);\n// or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "4908c49c-73f3-4789-897b-03d3330652da",
              "parentUUID": "88f0efde-9a6a-4736-9b67-53e1550678bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 412,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile(Cypress.config('configFile')).then(config => {\n  expect(config).to.be.an('string');\n});",
              "err": {},
              "uuid": "0b31983c-d2f5-45c7-9b5e-33fa31e9f76c",
              "parentUUID": "88f0efde-9a6a-4736-9b67-53e1550678bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 1138,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n});\n// JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "8cf42d01-bf9e-46e9-86d6-9e52e867abe4",
              "parentUUID": "88f0efde-9a6a-4736-9b67-53e1550678bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "affed89c-7d3b-41c8-9f2d-57c4ba3b9a25",
            "4908c49c-73f3-4789-897b-03d3330652da",
            "0b31983c-d2f5-45c7-9b5e-33fa31e9f76c",
            "8cf42d01-bf9e-46e9-86d6-9e52e867abe4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2841,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "72727498-314c-4624-bce9-974deecd42a0",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b9f2a78c-def3-4dd7-83d4-3c824ca7a614",
          "title": "Location",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 1101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "33ffced3-46fd-4d20-9111-886497c0ff7d",
              "parentUUID": "b9f2a78c-def3-4dd7-83d4-3c824ca7a614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 561,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "90940050-854b-49fb-83aa-faaeaf60c318",
              "parentUUID": "b9f2a78c-def3-4dd7-83d4-3c824ca7a614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 548,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "e3e41ee1-2261-40b9-9678-d2cb2433fae7",
              "parentUUID": "b9f2a78c-def3-4dd7-83d4-3c824ca7a614",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "33ffced3-46fd-4d20-9111-886497c0ff7d",
            "90940050-854b-49fb-83aa-faaeaf60c318",
            "e3e41ee1-2261-40b9-9678-d2cb2433fae7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d79f7f2f-0db5-416a-bcd0-e99cbeea0fb6",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a9276e52-92b1-4a49-b65d-3a3d8fb7a893",
          "title": "Misc",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".end() - end the command chain",
              "fullTitle": "Misc .end() - end the command chain",
              "timedOut": null,
              "duration": 1051,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/end\n// cy.end is useful when you want to end a chain of commands\n// and force Cypress to re-query from the root element\ncy.get('.misc-table').within(() => {\n  // ends the current chain and yields null\n  cy.contains('Cheryl').click().end();\n  // queries the entire table again\n  cy.contains('Charles').click();\n});",
              "err": {},
              "uuid": "a3ae42c7-5c63-40ec-a6b6-6b4d9cded974",
              "parentUUID": "a9276e52-92b1-4a49-b65d-3a3d8fb7a893",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 479,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`);\n// on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nconst isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  cy.log('Skipping test on CircleCI');\n  return;\n}\n// cy.exec problem on Shippable CI\n// https://github.com/cypress-io/cypress/issues/6718\nconst isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\nif (isShippable) {\n  cy.log('Skipping test on ShippableCI');\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec(`print ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n} else {\n  cy.exec(`cat ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "6c22b7b2-16a3-467c-b744-2b6eb6af402f",
              "parentUUID": "a9276e52-92b1-4a49-b65d-3a3d8fb7a893",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 516,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "6b2c0617-684b-4789-a7b9-6202a0692b99",
              "parentUUID": "a9276e52-92b1-4a49-b65d-3a3d8fb7a893",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 414,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "d33eec1c-5ff4-4469-98fe-ef706aa59a8e",
              "parentUUID": "a9276e52-92b1-4a49-b65d-3a3d8fb7a893",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "090636ef-0cf4-4580-bc78-8495254f5d52",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 2743,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Screenshot (my-image)\",\n        \"value\": \"data:image/png;base64, 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gIiIiIiIiMjVyc9sNvcMHz4cufbs27cPufoNHz4cERERERG5uu3btw8DIiIiIiIiIuJzBkRERERERETE5wyIiIiIiIiIiM8ZEBERERERERGfMyAiIiIiIiIiPmdARERERERERHzOgIiIiIiIiIj4nAERERERERER8TkDIiIiIiIiIuJzBkRERERERETE5wyIiIiIiIiIiM8ZEBERERERERGfMyAiIiIiIiIiPmdARERERERERHzOyAn79u1DRK5O+/btQ0RERERErn5Gz/oFiIiIiIiIiIhvGRARERERERERnzMgIiIiIiIiIj5nQERERERERER8zoCIiIiIiIiI+JwBEREREREREfE5AyIiIiIiIiLicwZERERERERExOcMiIiIiIiIiIjPGRARERERERERnzMgIiIiIiIiIj5nQERERERERER8zoCIiIiIiIiI+JwBEREREREREfE5AyIiIiIiIiLicwZERERERERExOcMiIiIiIiIiIjPGRARERERERERnzMgIiIiIiIiIj5nQERERERERER8zoCIiIiIiIiI+JwBEREREREREfE5AyIiIiIiIiLicwZERERERERExOcMiIiIiIiIiIjPGRARERERERERnzMgIiIiIiIiIj5nQERERERERER8zoCIiIiIiIiI+JwBEREREREREfE5AyIiIiIiIiLicwZERERERERExOcMiIiIiIiIiIjPGRARERERERERnzMgIiIiIiIiIj5nQERERERERER8zoCIiIiIiIiI+JwBEREREREREfE5AyIiIiIiIiLicwZERERERERExOcMiIiIiIiIiIjPGRARERERERERnzMgIiIiIiIiIj5nQERERERERER8zoCIiIiIiIiI+JwBEREREREREfE5I9cga9RMNsbYsA4Ajrkp2/cGU+vqEBEREREREfEVA9eakHRKrDasA+g1IJi0qHRKIhARERERERHxGQPXmqGRxBu4QCBJQxIQERERERER8RUDIiIiIiIiIuJzBq41B5qpOc4FOqlsdSAiIiIiIiLiK0auANb4B/kwPJiLHGtm4f++xHwuJYGSSZncfh0X69iG3/ZNXOTQejLqA9kYY8M6ADjmpmzfG2S0ICIiIiIiIuIzRq4A3zaZ6dcAC4nhgJP+BURjvY7+GcxcSn3TSq5vQkREREREROSKYeCKFkh8WDSXFBGK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B3Sy9hediIj8Vpzdj+sst5c7zNMflvOar4aAK0iohBkTBVLZE2w//ffszCG/Y6sdXvwM0Xa2nS0fxklwExNZEqPQm0PknlHC4T+bRERERERERESKyoyIiIiIiPyzNvnki1xT8vM/Z1r28f+Afd58ppW//V8ZvTzGR9/69yyaX8a0xb/873w8dpHEN1/gAauDaf5/epnTeYMPVm4iaK9k2sNH9xIfPU/nY/+WlRXVTFv1zl9xdGSQw1//E5503s+0Ne/+lJ9nzvDmI8/Q4K5h2vr3X6VtqI+/ffiPeXbRCqZ974N/4O8+PsYrKxp4vuoRpj1/7E3+MvUbWh78I/6dN8S05pM/40cD3fznmif5j/d9g2l/2vdz/kv/r/hPD3yb/+OBbzHtP53+Bf/n6V/yH+/7Bv+55kmm/Zf+X/GnfT/n33lDtDz4R0z70UA3zSd/xvNVj/DKigam/ST1Pj841sazi1bwtw//MdP+7uNjfO+Df2C9u4b/95FnmPbmUB//8/uv8qTzfg5//U+Y9vPMGda8+1NWVlTT+di/ZdrRkUFWvfNXPGyv5DcrNzHtg9HzfO3oXh6wOkh88wWmnc4b+P/pZRaXlpGu//dM++jSRTzt/x37vPlkH/8PTBu9PEb52/+VaZNPvsg1JT//c+TeVMLhP5tERERERERERIrKhIiIiIiIiIgUnQkRERERERERKToTIiIiIiIiIlJ0JkRERERERESk6EyIiIiIiIiISNGZEBEREREREZGiMyEiIiIiIiIiRWdCRERERERERIrOhIiIiIiIiIgUnQkRERERERERKToTIiIiIiIiIlJ0JkRERERERESk6EyIiIiIiIiISNGZEBEREREREZGiMyEiIiIiIiIiRWdCRERERERERIrOhIiIiIiIiIgUnQkRERERERERKToTIiIiIiIiIlJ0JkRERERERESk6EyIiIiIiIiISNGZEBEREREREZGiMyEiIiIiIiIiRWdCRERERERERIrOhIiIiIiIiIgUnQkRERERERERKToTIiIiIiIiIlJ0JkRERERERESk6EyIiIiIiIiISNGZEBEREREREZGiMyEiIiIiIiIiRWdCRERERERERIrOhIiIiIiIiIgUnQkRERERERERKToTIiIiIiIiIlJ0JkRERERERESk6EyIiIiIiIiISNGZEBEREREREZGiMyEiIiIiIiIiRWdCRERERERERIrOhIiIiIiIiIgUnQkRERERERERKToTIiIiIiIiIlJ0JkRERERERESk6EyIiIiIiIiISNGZJ598EREREREREREpLhMiIiIiIiIiUnQmRERERERERKToTIiIiIiIiIhI0ZkQERERERERkaIzISIiIiIiIiJFZ0JEREREREREis6EiIiIiIiIiBSdCREREREREREpOhMiIiIiIiIiUnQmRERERERERKToTIiIiIiIiIhI0ZkQERERERERkaIzISIiIiIiIiJFZ0JEREREREREis6EiIiIiIiIiBSdCREREREREREpOhMiIiIiIiIiUnQmRERERERERKToTIiIiIiIiIhI0ZkQERERERERkaIzISIiIiIiIiJFZ0JEREREREREis6EiIiIiIiIiBSdCREREREREREpOhMiIiIiIiIiUnQmRERERERERKToTIiIiIiIiIhI0ZkQERERERERkaIzISIiIiIiIiJFZ0JEREREREREis6EiIiIiIiIiBSdCREREREREREpOhMiIiIiIiIiUnQmRERERERERKToTIiIiIiIiIhI0ZkQERERERERkaIzISIiIiIiIiJFZ0JEREREREREis6EiIiIiIiIiBSdCREREREREREpOhMiIiIiIiIiUnQmRERERERERKToTIiIiIiIiIhI0ZkQERERERERkaIzISIiIiIiIiJFZ0JEREREREREis6EiIiIiIiIiBSdCbli5Fg3P3r1KD/62WlGuMHEGX688x+p/8tjXGLKxBl+vPMfqf/LY1xCRERERERE5MszIVdcGszw4+4hfhw3uMT1Jkj840l+dHE+P4zUUsoU0/08+6SNSyfO8KOeHCIiIiIiIiJflgm5PSPO//3LMfB6eOo+E9dUrFzC90wT/M3PjpGYQERERERERORLMSG3McHxt84RA763+kEquE5pDX8cMsFwmr97r4CIiIiIiIjIl2HmK2mMoXic//GLT/hlZgIw82idh2e/VYu/wsSMNLFXz3AMM9/+n76Gtz/OX//8PEezQKmFp/4wwPdDbj5rjKHu37C34xPey8IC5wL++F8FqOMmLvXxD90TYHLyrx+1MJeJh+pcLHlniL892sf/FgpSgYiIiIiIiMjdMfOVk6Pn1XZe6B7jEteMcfzt0/ztLwf50/+1nu/dZwGy9HQP8TfM55xxhNip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yWOsKkj8xQjNg1mePEuM/maRhrCHajbITtHXV0o84EZEREREZCtzIFuD4SU6WErkd1meNNlBPwxG8Ro89tyBMcKfHSNl88SYHkrgqh/hYFkd8cZiNiZHqj9N/ckgbkREREREtranvl5GAVy7dg0RERERERGRR8327dspBAciIiIiIiIiUnAORERERERERKTgHIiIiIiIiIhIwTkQERERERERkYJzICIiIiIiIiIF50BERERERERECs7BFpY71Y1pmpiDWURERERERES2MgdbmLMpimWNEf7MT2wGERERERERkS3LwZbnpOxFRERERERERLY0ByIiIiIiIiJScA4eAyWlHhYu5xARERERERHZqhw8BpxNUXrpwzS7SdmIiIiIiIiIbDnbeAzkTnXTRy+W5URERERERERkK3LwGFhcyFC6w4mIiIiIiIjIVuVARERERERERArOgYiIiIiIiIgUnIMtL8f8Z4iIiIiIiIhsadvYwnKnumnuy0B7HKsKERERERERkS1rG1uYsymK1YSIiIiIiIjIludARERERERERArOgYiIiIiIiIgUnAMRERERERERKTgHIiIiIiIiIlJwDkRERERERESk4ByIiIiIiIiISMFt43H18R956cRfWVXxIz5508X3JTto4j8Ont4xok1ORERERERERO5nG4+rl1/hk3fhy3Pj7P53vj8zMfyfhRmzvDgRERERERERWR8HsvleLMOJiIiIiIiIyPptY0ubY+jQn/kVea+/Wk1sj5P7y/H7I9O8Y3PdD/jg3VfYSd6X58bZ/Ye/k/cDPnj3FXYiIiIiIiIi8vBsY8vK8fsjl3n+wGt8YrAsx++PZPl9RR0/Nbi3j//MO//0Iz454OIOH/+R3f++g0/edbHq4z/y0gdzfPKmi/XIXV7AU1qCiIiIiIiIyEZsY6uyFzlj/50Pj5zlHW75xZeAwb09+w+8fvHPvHToSz549xV2csuFmb/Cxb/y0qE/c5PxD3wJPMs92Cm690agd4xokxMRERERERGRjdjGVmY8x/kDbp5lgww3sXfdwBxDh87yJk/z3oE6fmqw6hf7XqPzZTbG8BK1vOROddN9qpdokxMRERERERGR9XKwVRn/SIX9Bf96LseDc9H57mt8UPF3rnzJqh3/7Wl+deKPXODBOHeUkllYRERERERERGQjtrFlueg88DeCR6Z5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GphZisuOiIiIiIiIyEUrgIuYdUohrimIiIiIiIiIXPQMRERERERERMR0BiIiIiIiIiJiOgMRERERERERMZ2BiIiIiIiIiJjOQERERERERERMZyAiIiIiIiIipjMQEREREREREdMZiIiIiIiIiIjpDERERERERETEdAYiIiIiIiIiYjoDERERERERETGdgYiIiIiIiIiYzkBERERERERETGcgIiIiIiIiIqYzEBERERERERHTGZhkwIABiIiIiIiIiFxIBgwYgFkMTGIYBiIiIiIiIiIXEsMwMEsAJgkMDKRHV1cXn3/+OSIiIiIiIiJmGTBgAIZhEBgYiFkCMFFgYCAiIiIiIiIiAgYiIiIiIiIiYjoDERERERERETGdgYiIiIiIiIiYzkBERERERERETGcgIiIiIiIiIqYzEBERERERERHTGYiIiIiIiIiI6QxERERERERExHQGIiIiIiIiImI6AxERERERERExnYGIiIiIiIiImM5ARERERERERExnICIiIiIiIiKmMxARERERERER0xmIiIiIiIiIiOkMRERERERERMR0BiIiIiIiIiJiOgMRERERERERMZ2BiIiIiIiIiJjOQERERERERERMZyAiIiIiIiIipjMQEREREREREdMZiIiIiIiIiIjpDERERERERETEdAYiIiIiIiIiYjoDERERERERETGdgYiIiIiIiIiYzkBERERERERETGcgIiIiIiIiIqYLwCR79+5FRERERERE5EIzdOhQzBCASYYOHYqIiIiIiIiI9DEQEREREREREdMZiIiIiIiIiIjpDERERERERETEdAYiIiIiIiIiYjoDERERERERETGdgYiIiIiIiIiYzkBERERERERETGcgIiIiIiIiIqYzEBERERERERHTGYiIiIiIiIiI6QxERERERERExHQGIiIiIiIiImI6AxERERERERExnYGIiIiIiIiImM5ARERERERERExnICIiIiIiIiKmMxARERERERER0xmIiIiIiIiIiOkMRERERERERMR0BiIiIiIiIiJiOgMRERERERERMZ2BiIiIiIiIiJjOQERERERERERMZyAiIiIiIiIipjMQEREREREREdMZiIiIiIiIiIjpDERERERERETEdAYiIiIiIiIiYjoDERERERERETGdgYiIiIiIiIiYzkBERERERERETGcgIiIiIiIi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iIiIiEjEGYiIiIiIiIhIxBmIiIiIiIiISMQZiIiIiIiIiEjEGYiIiIiIiIhIxBmIiIiIiIiISMQZiIiIiIiIiEjEGYiIiIiIiIhIxBmIiIiIiIiISMQZiIiIiIiIiEjEGYiIiIiIiIhIxBmIiIiIiIiISMQZiIiIiIiIiFyHli9fzkRiICIiIiIiInKdWb58OevXr2ciMRARERERERG5jixfvpz169cz0RiIiIiIiIiIXCeWL1/O+vXrmYgMRERERERERK4Dy5cvZ/369YxZvnw5E4mBiIiIiIiIyDVu+fLlrF+/njHLly9n/fr1TCQGIiIiInLNMAyDkydPIiIiZy1fvpz169czZvny5axfv55hJ0+exDAMJgIDEREREblmxMTEEA6HOXXqFCIiAsuXL2f9+vWMWb58OevXr2fYqVOnCIfDxMTEMBEYiIiIiMg1w2Kx0N3dTTAY5OTJk4iI3OjWr1/PudavX8+wkydPEgwG6e7uxmKxMBFEISIiIiLXjOjoaGw2G6FQiLfffpvBwUFERORihmEQExODzWYjOjqaiSAKEREREbmmREdHc/vttyMiIjcWAxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERERERGJOAMRERERERERiTgDEREREREREYk4AxERERH5TKKiohARkYkhKiqKSDEQERERkc8kKioKERGZGKKioogUAxERERH5TAzDIDo6mqioKERE5PoUFRVFdHQ0hmEQKVGIiIiIyGdmGAYmkwmTyYSIiMinYSAiIiIiIiIiEWcgIiIiIiIiIhFnICIiIiIiIiIRZyAiIiIiIiIiEWcgIiIiIiIiIhFnICIiIiIiIiIRZyAiIiIiIiIiEWcg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+wfFErS+nYEYSBZwxKpmwlfHYuZocqoblUEWzeIL2xWPnykKnJlM4IYkCLjB9PkPTBiLiLSZPE7zg1KlTiIiIiLSnzp074w11dXW0F0uDh6+qJmshZTkxhK2Mx84ZlTkUTijHvi+ZULypikOz0nHP2ETEYOQbKl+RRI1jOVGTgvjqDnBw2AuwfhMRg/GOyhwKJ5Rj35dMKK3KVyRRxXyGpg3ka6nMoXBCOfZ9yYRy7cpXJFHjWE7UpCBaVOZQOCEP3zcX0i+Yi7jNJuS7xdfXF2+wICIiIiId2AGqni3Bd/1C7FyPgui3chPSPkLTNhHK11OT9Tp1o5IJG4z3HC3HzYWqOHUILPGBfLuqOHUIcHDe0XLc9KFzMCJeY0FERERErhsekwmTx8PVVXFoVjrH3wPLguVEDUakbfszKJiRA8QTtC8eO140OJmg6UlUDcuhijOmz2fopCC+XUH0ezqZwgnpFDzLGf3xe3MhoVzMYzIh8m0xeZrgBadOnUJERESkPXXu3BlvqKuro72YPGBu9CAi14cGw4THhHzH+Pr64g0GIiIiInLd8JigwTDhMZkQEe/xmEw0GCY8JkS+NRZERERE5LriMUGDiSYmRETku8NARERERERERLzOQERERERERES8zkBEREREREREvM5ARERERERERLzOQERERERERES8zkBEREREREREvM5ARERERERERLzOwEtMJhMiIiIi7cVkMiEiItKRGXiJYRiIiIiItBfDMBAREenILHhJp06daNbY2IjH40FERETk6zCZTBiGQadOnRAREenILHhRp06dEBEREREREREwEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQERERkW/EYrEgIiI3BovFgrcYiIiIiMg3YrFYEBGRG4PFYsFbDERERETkGzEMg86dO2OxWBARkY7JYrHQuXNnDMPAWyyIiIiIyDdmGAZWqxWr1YqIiMjXYSAiIiIiIiIiXmcgIiIiIiIiIl5nICIiIiIiIiJeZyAiIiIiIiIiXmcgIiIiIiIiIl5nICIiIiIiIiJeZyAiIiIiIiIiXmcgIiIiIiIiIl5nICIiIiIiIiJeZyAiIiIiIiIiXmcgIiIiIiIiIl5nICIiIiIiIiJeZyAiIiIiIiIiXmcgIiIiIiIiIl5nICIiIiIiIiJeZyAiIiIiIiIiXmcgIiIiIiIiIl5nICIiIiIiIiJeZyAiIiIiIiIiXmcgIiIiIiIiIl5nwUv+9re/ISIiIiIiInK96datG95gwUu6deuGiIiIiIiIiLQyEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzOQ69vfP+LpZ7J5+M2jtGg8woYXshn1ykFciIiIiIiIyI3CQK5jJ8n74xGy6cqMuB60MHpz/51dcJUcYXXhSUREREREROTGYCDXr5IiXiyBkCG9ienMObboEBKNRjL/8yCljYiIiIiIiMgNwECuU8fJfttJBZ2YNrI3F7HeyuQhBvytktc/qEdEREREREQ6Pgte1UjtZyXseLuSrZVumvn5+zNtYjgxPbvSwlVOdtZRPgEi7hhGXC+Di1T/lcxdxzhOF+6aFEm4lQs4yd/2CfmnIGJkNHE9Ocf5/j5+93Ej+AXy4N1h2Dijtowtb1XzOV0YEXGaPQfd0Ks3j9zyPyz/w+d8gA/jx/wvEocEYKVJbSV5eR+ztfAkn9HMwNHXTuLYAUQFdKJVJTvfOMJBLMTeE0nPQ4X8865jlLrAz9+fh38YRXRAJy5y9GO2fAYEdueuHnyJQXhUN0L2OdmS/zGPDxmADREREREREenILHhNPaXZ7/HAf9fj4gJ/ryZ/dTUxPxjGirGBYA3E9kURG0ogxCgnrldvLlScV8ry9xuxRtzKI1a+pBs+tU42FEG471HievaglZPcXdVsqAaMBmJ/EEaUQQtXSTlL3z8BPUOZGHCMDe/XQ/kJip315DXS5DTdj8E0mlQ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Pq4W2Gb25P64LcJLswuNcrJIdu0+C0YVpI4MRERERERGRjs9CB1C7L58XD56m9tBx8lw08WHG93tzo7ONdJD67kes3v0xFTFDCOGMkiNk/g2iYvoTdzMiIiIiIiJyAzDoAGw3NbDzo+PkuWhiMDkhksmB3PiM3kz7336E/K2SzPfraXWcne86qfANYM64HoiIiIiIiMiNweRpwvWusZ7aL+pp4dMVm9Xgu+M0rtqT1Jt9sPn6QGM9tV/Ug09XbFYDERERERERuTFY6AgMH2w2H76bOmG1dcLKGYYPNpsPIiIiIiIicmMxEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvMxARERERERERrzMQEREREREREa8zEBERERERERGvsyAiV+RpaKTBdZpGt5vvMsNiwWzthMlsICIiIiIi7c9ARC7L09DI6bqTNLrdfNc1ut2crjuJp6ERERERERFpfwbSsTUADUhbGvjGGlynkYs1uE7zndeAiIiIiEi7M5COq2oraXeksdVJ2xqK2XDfKB7YVMp3StVW0m5PY6uTb6zR7UYu1uh2813n3J7G7U9sxYmIiIiISPux4BVOtj5xD8+/RxumsebP6USbkW/MSleHA0eAH9/Yh5k8sNjFnE0PE8V15MNMHljsYs6mh4lCRERERESk47LgFQFMfnkvk2lWyPLbH4bf7iV9MNKezA4Sl71KIu2g4XOKS7j+NHxOcQnydVXmUDihHPu+ZEJpVb4iiRNjNhExGBERERER+RaZFzbBqyrZs24rTHqMEbfQqsFJ/oZ5PJz+DCt+8xp7aroRNTSCbp24RHHGJCb9eSAzbg8GXOQtuYP/s86f+HsH0g0o/d0DTNz5PWbcEUzhy7fzy4oh+PzHUzzw07fpnpBAz7ItPP/cQp5fsJRV615jT01vokc6sBk0cbL1idFk3xTPkXVTeXTOCjJ3H6P38BgcNtpQQd6y55n3wgIW//Ma/u2PB/AZchdRgWZaVG0lbUw2fndVsvlnj5O26BX2nBpI3B098aFtzr0bmPfIj3nmn9fw2u5jdLstmgi7mRZfFJP9aindBzhZ/0QKz/xzJu8bAxk5qCe+Bk2cbH1iNGtO/5Dx4b60qCtly/OPMXP2UlZt2cOx4Ghi+tk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\"\n    }\n]",
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "7269fb99-949c-4759-aa3a-bb3bed36ddad",
                  "parentUUID": "090636ef-0cf4-4580-bc78-8495254f5d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 991,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  onBeforeScreenshot() {},\n  onAfterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "877e1ac3-aa36-4bd1-b237-7d372b6d2301",
                  "parentUUID": "090636ef-0cf4-4580-bc78-8495254f5d52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7269fb99-949c-4759-aa3a-bb3bed36ddad",
                "877e1ac3-aa36-4bd1-b237-7d372b6d2301"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3734,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "a3ae42c7-5c63-40ec-a6b6-6b4d9cded974",
            "6c22b7b2-16a3-467c-b744-2b6eb6af402f",
            "6b2c0617-684b-4789-a7b9-6202a0692b99",
            "d33eec1c-5ff4-4469-98fe-ef706aa59a8e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2460,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "59033167-e39a-4b71-a90c-9d8f79448522",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3184055b-ab0c-4de6-81fc-d64fe5ecaf52",
          "title": "Navigation",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.go() - go back or forward in the browser's history",
              "fullTitle": "Navigation cy.go() - go back or forward in the browser's history",
              "timedOut": null,
              "duration": 1854,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/go\ncy.location('pathname').should('include', 'navigation');\ncy.go('back');\ncy.location('pathname').should('not.include', 'navigation');\ncy.go('forward');\ncy.location('pathname').should('include', 'navigation');\n// clicking back\ncy.go(-1);\ncy.location('pathname').should('not.include', 'navigation');\n// clicking forward\ncy.go(1);\ncy.location('pathname').should('include', 'navigation');",
              "err": {},
              "uuid": "9060b1ad-c7d0-4325-9f15-64ed99600e4c",
              "parentUUID": "3184055b-ab0c-4de6-81fc-d64fe5ecaf52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.reload() - reload the page",
              "fullTitle": "Navigation cy.reload() - reload the page",
              "timedOut": null,
              "duration": 1309,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/reload\ncy.reload();\n// reload the page without using the cache\ncy.reload(true);",
              "err": {},
              "uuid": "93b0de12-ad59-4638-af3a-a62ee9af2080",
              "parentUUID": "3184055b-ab0c-4de6-81fc-d64fe5ecaf52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.visit() - visit a remote url",
              "fullTitle": "Navigation cy.visit() - visit a remote url",
              "timedOut": null,
              "duration": 1573,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/visit\n// Visit any sub-domain of your current domain\n// Pass options to the visit\ncy.visit('https://example.cypress.io/commands/navigation', {\n  timeout: 50000,\n  // increase total time for the visit to resolve\n  onBeforeLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  },\n  onLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  }\n});",
              "err": {},
              "uuid": "5a2fec49-b5ce-4084-b1e2-0ae7db9bb9fa",
              "parentUUID": "3184055b-ab0c-4de6-81fc-d64fe5ecaf52",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9060b1ad-c7d0-4325-9f15-64ed99600e4c",
            "93b0de12-ad59-4638-af3a-a62ee9af2080",
            "5a2fec49-b5ce-4084-b1e2-0ae7db9bb9fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4736,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d16674e7-7589-4bfe-99e6-fcdc80ac6c4e",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "606fe76c-c35b-42de-8d34-527bb2bfbb44",
          "title": "Network Requests",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 1653,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200);\n  // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "6e2cf3ec-e709-46df-ab86-954f070933c5",
              "parentUUID": "606fe76c-c35b-42de-8d34-527bb2bfbb44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 921,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "4672e54d-89de-4745-8be2-f400ef10303e",
              "parentUUID": "606fe76c-c35b-42de-8d34-527bb2bfbb44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 931,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "8d7ba424-29f1-4170-8daf-ca654b038fdb",
              "parentUUID": "606fe76c-c35b-42de-8d34-527bb2bfbb44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 1268,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number');\n  // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n})\n// note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  });\n  // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100);\n  // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "9cfadbfc-6160-4762-acea-3db6c1784a35",
              "parentUUID": "606fe76c-c35b-42de-8d34-527bb2bfbb44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 1279,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE 👀\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "c4a15d5c-7aab-403a-bbed-29484264e021",
              "parentUUID": "606fe76c-c35b-42de-8d34-527bb2bfbb44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 1998,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist';\n// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n// Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment');\n// we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n});\n// Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment');\n// we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment');\n// our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "f801f39a-83fd-4b45-a439-a7c066ec4eee",
              "parentUUID": "606fe76c-c35b-42de-8d34-527bb2bfbb44",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e2cf3ec-e709-46df-ab86-954f070933c5",
            "4672e54d-89de-4745-8be2-f400ef10303e",
            "8d7ba424-29f1-4170-8daf-ca654b038fdb",
            "9cfadbfc-6160-4762-acea-3db6c1784a35",
            "c4a15d5c-7aab-403a-bbed-29484264e021",
            "f801f39a-83fd-4b45-a439-a7c066ec4eee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8050,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b28e2c41-3384-4be0-987d-e2e6370d71a5",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f06d972e-6c81-4b66-8609-33071518b6cb",
          "title": "Querying",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.get() - query DOM elements",
              "fullTitle": "Querying cy.get() - query DOM elements",
              "timedOut": null,
              "duration": 792,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/get\ncy.get('#query-btn').should('contain', 'Button');\ncy.get('.query-btn').should('contain', 'Button');\ncy.get('#querying .well>button:first').should('contain', 'Button');\n//              ↲\n// Use CSS selectors just like jQuery\ncy.get('[data-test-id=\"test-example\"]').should('have.class', 'example');\n// 'cy.get()' yields jQuery object, you can get its attribute\n// by invoking `.attr()` method\ncy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example');\n// or you can get element's CSS property\ncy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static');\n// or use assertions directly during 'cy.get()'\n// https://on.cypress.io/assertions\ncy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');",
              "err": {},
              "uuid": "014db805-1f6e-404b-9c2a-dc8d351a0b95",
              "parentUUID": "f06d972e-6c81-4b66-8609-33071518b6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.contains() - query DOM elements with matching content",
              "fullTitle": "Querying cy.contains() - query DOM elements with matching content",
              "timedOut": null,
              "duration": 409,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/contains\ncy.get('.query-list').contains('bananas').should('have.class', 'third');\n// we can pass a regexp to `.contains()`\ncy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\ncy.get('.query-list').contains('apples').should('have.class', 'first');\n// passing a selector to contains will\n// yield the selector containing the text\ncy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\ncy.get('.query-button').contains('Save Form').should('have.class', 'btn');",
              "err": {},
              "uuid": "0c871423-a000-4dfd-bee2-9ed6aa87e9da",
              "parentUUID": "f06d972e-6c81-4b66-8609-33071518b6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".within() - query DOM elements within a specific element",
              "fullTitle": "Querying .within() - query DOM elements within a specific element",
              "timedOut": null,
              "duration": 377,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/within\ncy.get('.query-form').within(() => {\n  cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n  cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n});",
              "err": {},
              "uuid": "7fa0e6b5-00ad-4c05-9f78-8152607da0d1",
              "parentUUID": "f06d972e-6c81-4b66-8609-33071518b6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.root() - query the root DOM element",
              "fullTitle": "Querying cy.root() - query the root DOM element",
              "timedOut": null,
              "duration": 399,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/root\n// By default, root is the document\ncy.root().should('match', 'html');\ncy.get('.query-ul').within(() => {\n  // In this within, the root is now the ul DOM element\n  cy.root().should('have.class', 'query-ul');\n});",
              "err": {},
              "uuid": "90e87849-759d-4626-8e83-0dbd6ac3e992",
              "parentUUID": "f06d972e-6c81-4b66-8609-33071518b6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "best practices - selecting elements",
              "fullTitle": "Querying best practices - selecting elements",
              "timedOut": null,
              "duration": 894,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/best-practices#Selecting-Elements\ncy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n  // Worst - too generic, no context\n  cy.get('button').click();\n  // Bad. Coupled to styling. Highly subject to change.\n  cy.get('.btn.btn-large').click();\n  // Average. Coupled to the `name` attribute which has HTML semantics.\n  cy.get('[name=submission]').click();\n  // Better. But still coupled to styling or JS event listeners.\n  cy.get('#main').click();\n  // Slightly better. Uses an ID but also ensures the element\n  // has an ARIA role attribute\n  cy.get('#main[role=button]').click();\n  // Much better. But still coupled to text content that may change.\n  cy.contains('Submit').click();\n  // Best. Insulated from all changes.\n  cy.get('[data-cy=submit]').click();\n});",
              "err": {},
              "uuid": "eacedbb5-7839-4d96-a3a4-983d32a78526",
              "parentUUID": "f06d972e-6c81-4b66-8609-33071518b6cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "014db805-1f6e-404b-9c2a-dc8d351a0b95",
            "0c871423-a000-4dfd-bee2-9ed6aa87e9da",
            "7fa0e6b5-00ad-4c05-9f78-8152607da0d1",
            "90e87849-759d-4626-8e83-0dbd6ac3e992",
            "eacedbb5-7839-4d96-a3a4-983d32a78526"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2871,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a7438250-309f-4767-b990-19a1b6ef733e",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "653f6fbe-7b7b-4fc7-80a5-263d2dd4f71f",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 732,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spy\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  foo() {}\n};\nconst spy = cy.spy(obj, 'foo').as('anyArgs');\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "b3680be9-d111-4704-9bce-86836b107779",
              "parentUUID": "653f6fbe-7b7b-4fc7-80a5-263d2dd4f71f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2554,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n  */\n  foo(x) {\n    console.log('obj.foo called with', x);\n  }\n};\ncy.spy(obj, 'foo').as('foo');\nsetTimeout(() => {\n  obj.foo('first');\n}, 500);\nsetTimeout(() => {\n  obj.foo('second');\n}, 2500);\ncy.get('@foo').should('have.been.calledTwice');",
              "err": {},
              "uuid": "7b4fe529-dcf1-4de3-92ba-7ea01440c0f3",
              "parentUUID": "653f6fbe-7b7b-4fc7-80a5-263d2dd4f71f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 447,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/stub\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n  */\n  foo(a, b) {\n    console.log('a', a, 'b', b);\n  }\n};\nconst stub = cy.stub(obj, 'foo').as('foo');\nobj.foo('foo', 'bar');\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "c583faa9-bd78-4b45-a5fa-cc8f695f89ff",
              "parentUUID": "653f6fbe-7b7b-4fc7-80a5-263d2dd4f71f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 674,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#clock-div').click().should('have.text', '1489449600');",
              "err": {},
              "uuid": "7a9a3df1-8d17-4061-af72-6abc22fa83bd",
              "parentUUID": "653f6fbe-7b7b-4fc7-80a5-263d2dd4f71f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 735,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#tick-div').click().should('have.text', '1489449600');\ncy.tick(10000); // 10 seconds passed\ncy.get('#tick-div').click().should('have.text', '1489449610');",
              "err": {},
              "uuid": "bd64bc96-647b-4c26-ab71-a564207a96e0",
              "parentUUID": "653f6fbe-7b7b-4fc7-80a5-263d2dd4f71f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n  */\n  greet(name) {\n    return `Hello, ${name}!`;\n  }\n};\ncy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\nexpect(greeter.greet('World')).to.equal('Hi');\nexpect(() => greeter.greet(42)).to.throw('Invalid name');\nexpect(greeter.greet).to.have.been.calledTwice;\n// non-matched calls goes the actual method\nexpect(greeter.greet()).to.equal('Hello, undefined!');",
              "err": {},
              "uuid": "cdca64e5-59dc-487b-b756-a1cd88558c29",
              "parentUUID": "653f6fbe-7b7b-4fc7-80a5-263d2dd4f71f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n  */\n  add(a, b) {\n    return a + b;\n  }\n};\nconst spy = cy.spy(calculator, 'add').as('add');\nexpect(calculator.add(2, 3)).to.equal(5);\n// if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3);\n// let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number);\n// alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3));\n// match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3);\n// match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n/**\n * Returns true if the given number is even\n * @param {number} x\n */\nconst isEven = x => x % 2 === 0;\n// expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isGreaterThan = limit => x => x > limit;\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isLessThan = limit => x => x < limit;\n// you can combine several matchers using \"and\", \"or\"\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3)));\n// matchers can be used from BDD assertions\ncy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3));\n// you can alias matchers for shorter test code\nconst {\n  match: M\n} = Cypress.sinon;\ncy.get('@add').should('have.been.calledWith', M.number, M(3));",
              "err": {},
              "uuid": "ecbdb4e3-0f6d-4e67-bdbe-28568e243416",
              "parentUUID": "653f6fbe-7b7b-4fc7-80a5-263d2dd4f71f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3680be9-d111-4704-9bce-86836b107779",
            "7b4fe529-dcf1-4de3-92ba-7ea01440c0f3",
            "c583faa9-bd78-4b45-a5fa-cc8f695f89ff",
            "7a9a3df1-8d17-4061-af72-6abc22fa83bd",
            "bd64bc96-647b-4c26-ab71-a564207a96e0",
            "cdca64e5-59dc-487b-b756-a1cd88558c29",
            "ecbdb4e3-0f6d-4e67-bdbe-28568e243416"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5311,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "069c1f4e-125f-40d0-b997-e758e2d2f5eb",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "221e00f0-e201-46d5-943c-7a6219ebd04e",
          "title": "Local Storage / Session Storage",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "fullTitle": "Local Storage / Session Storage cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "timedOut": null,
              "duration": 985,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearlocalstorage\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// clearLocalStorage() yields the localStorage object\ncy.clearLocalStorage().should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.be.null;\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear key matching string in localStorage\ncy.clearLocalStorage('prop1').should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.eq('blue');\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear keys matching regex in localStorage\ncy.clearLocalStorage(/prop1|2/).should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});",
              "err": {},
              "uuid": "83c41c50-4e94-4029-bb82-c4a7eb73d797",
              "parentUUID": "221e00f0-e201-46d5-943c-7a6219ebd04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "timedOut": null,
              "duration": 524,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getalllocalstorage\ncy.get('.ls-btn').click();\n// getAllLocalStorage() yields a map of origins to localStorage values\ncy.getAllLocalStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if localStorage is set on them\n    'https://example.cypress.io': {\n      'prop1': 'red',\n      'prop2': 'blue',\n      'prop3': 'magenta'\n    }\n  });\n});",
              "err": {},
              "uuid": "3a819b95-9cb5-421f-a9a4-33d07569bcb4",
              "parentUUID": "221e00f0-e201-46d5-943c-7a6219ebd04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "timedOut": null,
              "duration": 521,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearalllocalstorage\ncy.get('.ls-btn').click();\n// clearAllLocalStorage() yields null\ncy.clearAllLocalStorage().should(() => {\n  expect(sessionStorage.getItem('prop1')).to.be.null;\n  expect(sessionStorage.getItem('prop2')).to.be.null;\n  expect(sessionStorage.getItem('prop3')).to.be.null;\n});",
              "err": {},
              "uuid": "7e61dd1d-e598-4eed-ae0c-2b40daa82d00",
              "parentUUID": "221e00f0-e201-46d5-943c-7a6219ebd04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 524,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallsessionstorage\ncy.get('.ls-btn').click();\n// getAllSessionStorage() yields a map of origins to sessionStorage values\ncy.getAllSessionStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if sessionStorage is set on them\n    'https://example.cypress.io': {\n      'prop4': 'cyan',\n      'prop5': 'yellow',\n      'prop6': 'black'\n    }\n  });\n});",
              "err": {},
              "uuid": "8c3282e9-049f-4e03-b653-2c12852b158a",
              "parentUUID": "221e00f0-e201-46d5-943c-7a6219ebd04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 641,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallsessionstorage\ncy.get('.ls-btn').click();\n// clearAllSessionStorage() yields null\ncy.clearAllSessionStorage().should(() => {\n  expect(sessionStorage.getItem('prop4')).to.be.null;\n  expect(sessionStorage.getItem('prop5')).to.be.null;\n  expect(sessionStorage.getItem('prop6')).to.be.null;\n});",
              "err": {},
              "uuid": "bc5ed4f4-ec3a-465b-90a5-3be5d220b1ce",
              "parentUUID": "221e00f0-e201-46d5-943c-7a6219ebd04e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "83c41c50-4e94-4029-bb82-c4a7eb73d797",
            "3a819b95-9cb5-421f-a9a4-33d07569bcb4",
            "7e61dd1d-e598-4eed-ae0c-2b40daa82d00",
            "8c3282e9-049f-4e03-b653-2c12852b158a",
            "bc5ed4f4-ec3a-465b-90a5-3be5d220b1ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3195,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ecb307b0-5022-46d9-892c-6863ceea00d1",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
          "title": "Traversal",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".children() - get child DOM elements",
              "fullTitle": "Traversal .children() - get child DOM elements",
              "timedOut": null,
              "duration": 655,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/children\ncy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');",
              "err": {},
              "uuid": "27f23bb7-986f-41da-bcca-a4a543b28d3d",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".closest() - get closest ancestor DOM element",
              "fullTitle": "Traversal .closest() - get closest ancestor DOM element",
              "timedOut": null,
              "duration": 360,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/closest\ncy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');",
              "err": {},
              "uuid": "83da753c-f284-43ec-a168-8897af2bba0e",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".eq() - get a DOM element at a specific index",
              "fullTitle": "Traversal .eq() - get a DOM element at a specific index",
              "timedOut": null,
              "duration": 376,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/eq\ncy.get('.traversal-list>li').eq(1).should('contain', 'siamese');",
              "err": {},
              "uuid": "acf7b412-902b-4bc3-8db2-e08bf5045694",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".filter() - get DOM elements that match the selector",
              "fullTitle": "Traversal .filter() - get DOM elements that match the selector",
              "timedOut": null,
              "duration": 380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/filter\ncy.get('.traversal-nav>li').filter('.active').should('contain', 'About');",
              "err": {},
              "uuid": "ba64588e-e9c2-4ce0-998b-90b32e04d3b3",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".find() - get descendant DOM elements of the selector",
              "fullTitle": "Traversal .find() - get descendant DOM elements of the selector",
              "timedOut": null,
              "duration": 562,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/find\ncy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);",
              "err": {},
              "uuid": "ae7ba121-d283-465e-91fb-5932eb11f2b0",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".first() - get first DOM element",
              "fullTitle": "Traversal .first() - get first DOM element",
              "timedOut": null,
              "duration": 525,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/first\ncy.get('.traversal-table td').first().should('contain', '1');",
              "err": {},
              "uuid": "0d5d2790-c570-47de-8580-55795f1661a2",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".last() - get last DOM element",
              "fullTitle": "Traversal .last() - get last DOM element",
              "timedOut": null,
              "duration": 605,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/last\ncy.get('.traversal-buttons .btn').last().should('contain', 'Submit');",
              "err": {},
              "uuid": "feaa0649-7a67-434c-8dea-6285923ccfec",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".next() - get next sibling DOM element",
              "fullTitle": "Traversal .next() - get next sibling DOM element",
              "timedOut": null,
              "duration": 497,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/next\ncy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');",
              "err": {},
              "uuid": "dd556539-daec-4e82-8984-8d518e887bbf",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextAll() - get all next sibling DOM elements",
              "fullTitle": "Traversal .nextAll() - get all next sibling DOM elements",
              "timedOut": null,
              "duration": 503,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextall\ncy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);",
              "err": {},
              "uuid": "9910acb1-c1c7-442a-ab4f-11a028b9b39e",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextUntil() - get next sibling DOM elements until next el",
              "fullTitle": "Traversal .nextUntil() - get next sibling DOM elements until next el",
              "timedOut": null,
              "duration": 495,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextuntil\ncy.get('#veggies').nextUntil('#nuts').should('have.length', 3);",
              "err": {},
              "uuid": "c86d16ac-f2fc-4dd4-b27f-d5645ecf63a4",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".not() - remove DOM elements from set of DOM elements",
              "fullTitle": "Traversal .not() - remove DOM elements from set of DOM elements",
              "timedOut": null,
              "duration": 510,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/not\ncy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');",
              "err": {},
              "uuid": "a2e78717-b5c1-4427-87a0-ce1a9beb1518",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parent() - get parent DOM element from DOM elements",
              "fullTitle": "Traversal .parent() - get parent DOM element from DOM elements",
              "timedOut": null,
              "duration": 526,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parent\ncy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');",
              "err": {},
              "uuid": "9f510a4b-21ba-4de8-9229-04c5d676828c",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parents() - get parent DOM elements from DOM elements",
              "fullTitle": "Traversal .parents() - get parent DOM elements from DOM elements",
              "timedOut": null,
              "duration": 495,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parents\ncy.get('.traversal-cite').parents().should('match', 'blockquote');",
              "err": {},
              "uuid": "9dbfc9b3-9bc9-4ac7-bdac-e5fb7c399c47",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parentsUntil() - get parent DOM elements from DOM elements until el",
              "fullTitle": "Traversal .parentsUntil() - get parent DOM elements from DOM elements until el",
              "timedOut": null,
              "duration": 503,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parentsuntil\ncy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);",
              "err": {},
              "uuid": "089bbb33-ac0f-4808-afe5-a171b4a24a6f",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prev() - get previous sibling DOM element",
              "fullTitle": "Traversal .prev() - get previous sibling DOM element",
              "timedOut": null,
              "duration": 536,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prev\ncy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');",
              "err": {},
              "uuid": "e17ec70a-6afa-42af-9e0d-ea73acadb676",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevAll() - get all previous sibling DOM elements",
              "fullTitle": "Traversal .prevAll() - get all previous sibling DOM elements",
              "timedOut": null,
              "duration": 529,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevall\ncy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);",
              "err": {},
              "uuid": "eed13c67-8e56-4c36-a66f-f66e5380723a",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevUntil() - get all previous sibling DOM elements until el",
              "fullTitle": "Traversal .prevUntil() - get all previous sibling DOM elements until el",
              "timedOut": null,
              "duration": 490,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevuntil\ncy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);",
              "err": {},
              "uuid": "ddca5b3f-08af-477a-bc64-51171e861124",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".siblings() - get all sibling DOM elements",
              "fullTitle": "Traversal .siblings() - get all sibling DOM elements",
              "timedOut": null,
              "duration": 562,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/siblings\ncy.get('.traversal-pills .active').siblings().should('have.length', 2);",
              "err": {},
              "uuid": "24c8a7c3-5ef3-4311-8799-731b52750fd4",
              "parentUUID": "48f3d898-2c6b-46ae-a7ba-2c83b90b99f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27f23bb7-986f-41da-bcca-a4a543b28d3d",
            "83da753c-f284-43ec-a168-8897af2bba0e",
            "acf7b412-902b-4bc3-8db2-e08bf5045694",
            "ba64588e-e9c2-4ce0-998b-90b32e04d3b3",
            "ae7ba121-d283-465e-91fb-5932eb11f2b0",
            "0d5d2790-c570-47de-8580-55795f1661a2",
            "feaa0649-7a67-434c-8dea-6285923ccfec",
            "dd556539-daec-4e82-8984-8d518e887bbf",
            "9910acb1-c1c7-442a-ab4f-11a028b9b39e",
            "c86d16ac-f2fc-4dd4-b27f-d5645ecf63a4",
            "a2e78717-b5c1-4427-87a0-ce1a9beb1518",
            "9f510a4b-21ba-4de8-9229-04c5d676828c",
            "9dbfc9b3-9bc9-4ac7-bdac-e5fb7c399c47",
            "089bbb33-ac0f-4808-afe5-a171b4a24a6f",
            "e17ec70a-6afa-42af-9e0d-ea73acadb676",
            "eed13c67-8e56-4c36-a66f-f66e5380723a",
            "ddca5b3f-08af-477a-bc64-51171e861124",
            "24c8a7c3-5ef3-4311-8799-731b52750fd4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4be42c17-0e9e-45c5-b0b5-20f7b9b16f2d",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d387ebef-9585-4dc9-9808-c4a60dfe9a0a",
          "title": "Utilities",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 1134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  let ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "7a1e544b-4d61-4b05-b021-3e480765f852",
              "parentUUID": "d387ebef-9585-4dc9-9808-c4a60dfe9a0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 455,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/$\nlet $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active').click().should('have.class', 'active');",
              "err": {},
              "uuid": "93c34dfb-996c-49dd-9e01-35cf9193516c",
              "parentUUID": "d387ebef-9585-4dc9-9808-c4a60dfe9a0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 782,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then($div => {\n  // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n  // get the dataUrl string for the javascript-logo\n  return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n    // create an <img> element and set its src to the dataUrl\n    let img = Cypress.$('<img />', {\n      src: dataUrl\n    });\n    // need to explicitly return cy here since we are initially returning\n    // the Cypress.Blob.imgSrcToDataURL promise to our test\n    // append the image\n    $div.append(img);\n    cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl);\n  });\n});",
              "err": {},
              "uuid": "61ce4920-d402-443f-a6cf-c71bbdb7d093",
              "parentUUID": "d387ebef-9585-4dc9-9808-c4a60dfe9a0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 405,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/minimatch\nlet matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be.true;\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.false;\n// ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.true;\n// whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be.false;",
              "err": {},
              "uuid": "0e11a2be-3672-45b0-9458-fc097e5ba66b",
              "parentUUID": "d387ebef-9585-4dc9-9808-c4a60dfe9a0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1482,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/promise\nlet waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  return new Cypress.Promise((resolve, reject) => {\n    setTimeout(() => {\n      // set waited to true\n      waited = true;\n      // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(() => {\n  // return a promise to cy.then() that\n  // is awaited until it resolves\n  return waitOneSecond().then(str => {\n    expect(str).to.eq('foo');\n    expect(waited).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "a27fe7b7-b3a4-4aeb-8c89-70f1f141636c",
              "parentUUID": "d387ebef-9585-4dc9-9808-c4a60dfe9a0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a1e544b-4d61-4b05-b021-3e480765f852",
            "93c34dfb-996c-49dd-9e01-35cf9193516c",
            "61ce4920-d402-443f-a6cf-c71bbdb7d093",
            "0e11a2be-3672-45b0-9458-fc097e5ba66b",
            "a27fe7b7-b3a4-4aeb-8c89-70f1f141636c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4258,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6f9e6284-193b-4607-b38f-2a12c980493c",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4779f559-b360-464c-afb6-c4bd91ef31d3",
          "title": "Viewport",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.viewport() - set the viewport size and dimension",
              "fullTitle": "Viewport cy.viewport() - set the viewport size and dimension",
              "timedOut": null,
              "duration": 3278,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/viewport\ncy.get('#navbar').should('be.visible');\ncy.viewport(320, 480);\n// the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible');\ncy.get('.navbar-toggle').should('be.visible').click();\ncy.get('.nav').find('a').should('be.visible');\n// lets see what our app looks like on a super large screen\ncy.viewport(2999, 2999);\n// cy.viewport() accepts a set of preset sizes\n// to easily set the screen to a device's width and height\n// We added a cy.wait() between each viewport change so you can see\n// the change otherwise it is a little too fast to see :)\ncy.viewport('macbook-15');\ncy.wait(200);\ncy.viewport('macbook-13');\ncy.wait(200);\ncy.viewport('macbook-11');\ncy.wait(200);\ncy.viewport('ipad-2');\ncy.wait(200);\ncy.viewport('ipad-mini');\ncy.wait(200);\ncy.viewport('iphone-6+');\ncy.wait(200);\ncy.viewport('iphone-6');\ncy.wait(200);\ncy.viewport('iphone-5');\ncy.wait(200);\ncy.viewport('iphone-4');\ncy.wait(200);\ncy.viewport('iphone-3');\ncy.wait(200);\n// cy.viewport() accepts an orientation for all presets\n// the default orientation is 'portrait'\ncy.viewport('ipad-2', 'portrait');\ncy.wait(200);\ncy.viewport('iphone-4', 'landscape');\ncy.wait(200);\n// The viewport will be reset back to the default dimensions\n// in between tests (the  default can be set in cypress.config.{js|ts})",
              "err": {},
              "uuid": "765e8120-b6f1-4bb6-a474-50ac1e6efd8b",
              "parentUUID": "4779f559-b360-464c-afb6-c4bd91ef31d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "765e8120-b6f1-4bb6-a474-50ac1e6efd8b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c8cd4768-5681-43d8-864f-b8e8ff5499b8",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01ceb2e0-bfb9-496b-af78-847276719d02",
          "title": "Waiting",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.wait() - wait for a specific amount of time",
              "fullTitle": "Waiting cy.wait() - wait for a specific amount of time",
              "timedOut": null,
              "duration": 5104,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.wait-input1').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input2').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input3').type('Wait 1000ms after typing');\ncy.wait(1000);",
              "err": {},
              "uuid": "0e0cf7e5-b37a-4378-8ce5-e7ae69751224",
              "parentUUID": "01ceb2e0-bfb9-496b-af78-847276719d02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wait() - wait for a specific route",
              "fullTitle": "Waiting cy.wait() - wait for a specific route",
              "timedOut": null,
              "duration": 1334,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// wait for GET comments/1\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);",
              "err": {},
              "uuid": "78c77bb1-f18a-41b1-ac1d-3a2713d39229",
              "parentUUID": "01ceb2e0-bfb9-496b-af78-847276719d02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e0cf7e5-b37a-4378-8ce5-e7ae69751224",
            "78c77bb1-f18a-41b1-ac1d-3a2713d39229"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6438,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3982b71c-865f-470b-9a29-9bef40ea830d",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "44aba3de-deee-41a6-9c30-eecbcd61bf9f",
          "title": "Window",
          "fullFile": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
          "file": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.window() - get the global window object",
              "fullTitle": "Window cy.window() - get the global window object",
              "timedOut": null,
              "duration": 678,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/window\ncy.window().should('have.property', 'top');",
              "err": {},
              "uuid": "44a927ed-983b-47ca-bf5d-1400be3a9d7b",
              "parentUUID": "44aba3de-deee-41a6-9c30-eecbcd61bf9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.document() - get the document object",
              "fullTitle": "Window cy.document() - get the document object",
              "timedOut": null,
              "duration": 326,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/document\ncy.document().should('have.property', 'charset').and('eq', 'UTF-8');",
              "err": {},
              "uuid": "ffbd6544-c58f-4671-abf7-7df43547eaa4",
              "parentUUID": "44aba3de-deee-41a6-9c30-eecbcd61bf9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.title() - get the title",
              "fullTitle": "Window cy.title() - get the title",
              "timedOut": null,
              "duration": 346,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/title\ncy.title().should('include', 'Kitchen Sink');",
              "err": {},
              "uuid": "baad9d5b-b54d-4e20-b802-bc5ea040fdb8",
              "parentUUID": "44aba3de-deee-41a6-9c30-eecbcd61bf9f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "44a927ed-983b-47ca-bf5d-1400be3a9d7b",
            "ffbd6544-c58f-4671-abf7-7df43547eaa4",
            "baad9d5b-b54d-4e20-b802-bc5ea040fdb8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1350,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "43e6b58f-50af-446d-8995-6f5c9ca23071",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f1b634f7-6c20-4a5d-b408-1c19e184dbb4",
          "title": "example to-do app",
          "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
          "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "1a4655cf-e373-4343-b6bd-9660fd472cd7",
              "parentUUID": "f1b634f7-6c20-4a5d-b408-1c19e184dbb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 399,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat';\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "68c91995-3fb3-4252-9023-474a20c867ed",
              "parentUUID": "f1b634f7-6c20-4a5d-b408-1c19e184dbb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "0f51988e-12b2-43e5-8f7e-54292b900bf3",
              "parentUUID": "f1b634f7-6c20-4a5d-b408-1c19e184dbb4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f9dba18a-21d1-41b0-8ac2-a86e826a6c20",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 260,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "5a374d03-8d24-410b-8a73-9ef4d812e391",
                  "parentUUID": "f9dba18a-21d1-41b0-8ac2-a86e826a6c20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 234,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "8d6a0dd1-9f50-486d-b648-b152986e6aa3",
                  "parentUUID": "f9dba18a-21d1-41b0-8ac2-a86e826a6c20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 259,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "5d5ff414-8094-4713-8570-21c7f9e860e9",
                  "parentUUID": "f9dba18a-21d1-41b0-8ac2-a86e826a6c20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a374d03-8d24-410b-8a73-9ef4d812e391",
                "8d6a0dd1-9f50-486d-b648-b152986e6aa3",
                "5d5ff414-8094-4713-8570-21c7f9e860e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 753,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "1a4655cf-e373-4343-b6bd-9660fd472cd7",
            "68c91995-3fb3-4252-9023-474a20c867ed",
            "0f51988e-12b2-43e5-8f7e-54292b900bf3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1810,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\reports\\.jsons",
        "charts": true,
        "reportPageTitle": "Cypress Test Report",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "saveJson": true
      },
      "version": "6.2.0"
    }
  }
}